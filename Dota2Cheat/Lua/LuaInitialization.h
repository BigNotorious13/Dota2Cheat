#pragma once
#include <sol/sol.hpp>
#include "../SDK/include.h"
#define LUA_ENUM_TABLE_ENTRY(x) #x, x

namespace Lua {
	inline void InitEnums(sol::state& lua) {
		auto teamTable = lua.create_table_with(
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_GOOD_GUYS),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_BAD_GUYS),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_BROADCASTER),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_SPECTATOR),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_PLAYER_POOL),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_NOTEAM),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_1),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_2),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_3),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_4),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_5),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_6),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_7),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_8),
			LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_NEUTRALS)
		);
		auto orderTable = lua.create_table_with(
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_NONE),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_TO_POSITION),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_TO_TARGET),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_ATTACK_MOVE),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_ATTACK_TARGET),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_POSITION),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TARGET),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TARGET_TREE),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_NO_TARGET),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TOGGLE),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_HOLD_POSITION),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_TRAIN_ABILITY),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_DROP_ITEM),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_GIVE_ITEM),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PICKUP_ITEM),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PICKUP_RUNE),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PURCHASE_ITEM),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_SELL_ITEM),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_DISASSEMBLE_ITEM),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_ITEM),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_STOP),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_TAUNT),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_BUYBACK),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_GLYPH),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_RUNE),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PING_ABILITY),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_TO_DIRECTION),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PATROL),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_RADAR),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CONTINUE),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_RIVER_PAINT),
			LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT)
		);
		auto orderIssuerTable = lua.create_table_with(
			LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_SELECTED_UNITS),
			LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_CURRENT_UNIT_ONLY),
			LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_HERO_ONLY),
			LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY)
		);
		auto pAttachTable = lua.create_table_with(
			LUA_ENUM_TABLE_ENTRY(PATTACH_INVALID),
			LUA_ENUM_TABLE_ENTRY(PATTACH_ABSORIGIN),
			LUA_ENUM_TABLE_ENTRY(PATTACH_ABSORIGIN_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_CUSTOMORIGIN),
			LUA_ENUM_TABLE_ENTRY(PATTACH_CUSTOMORIGIN_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_POINT),
			LUA_ENUM_TABLE_ENTRY(PATTACH_POINT_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_EYES_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_OVERHEAD_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_WORLDORIGIN),
			LUA_ENUM_TABLE_ENTRY(PATTACH_ROOTBONE_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_RENDERORIGIN_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_MAIN_VIEW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_WATERWAKE),
			LUA_ENUM_TABLE_ENTRY(PATTACH_CENTER_FOLLOW),
			LUA_ENUM_TABLE_ENTRY(PATTACH_CUSTOM_GAME_STATE_1),
			LUA_ENUM_TABLE_ENTRY(PATTACH_HEALTHBAR),
			LUA_ENUM_TABLE_ENTRY(MAX_PATTACH_TYPES)
		);

		lua.create_named_table("Enum",
			"PlayerOrderIssuer", orderIssuerTable,
			"DotaUnitOrder", orderTable,
			"PAttach", pAttachTable,
			"DotaTeam", teamTable
		);

	}
	inline void InitGlobals(sol::state& lua) {
		lua["ParticleManager"] = GameSystems::ParticleManager;
	}
	inline void ResetGlobals(sol::state& lua) {
		lua["ParticleManager"] = nullptr;
	}

	inline void InitInterfaces(sol::state& lua) {
		lua["EntitySystem"] = Interfaces::EntitySystem;
	}
	inline void InitClasses(sol::state& lua) {
#pragma region Base types
		{
			lua.new_usertype<Vector>(
				"Vector",
				sol::constructors<Vector(), Vector(float, float, float)>());
			auto type_Vector2 = lua.new_usertype<Vector2D>(
				"Vector2D",
				sol::constructors<Vector2D(float, float)>());
			auto type_Color = lua.new_usertype<Color>(
				"Color",
				sol::constructors<Color(unsigned char, unsigned char, unsigned char, unsigned char)>()
				);
			type_Color["RGBA"] = &Color::RGBA;
		}
#pragma endregion

		CSchemaClassBinding::BindLua(lua);
		CEntityIdentity::BindLua(lua);

		CBaseEntity::BindLua(lua);
		CGameEntitySystem::BindLua(lua);
		CDOTAModifier::BindLua(lua);
		CDOTAModifierManager::BindLua(lua);
		ItemOrAbility::BindLua(lua);
		CDOTABaseNPC::BindLua(lua);
		CDOTABaseNPC_Hero::BindLua(lua);
		CDOTAPlayerController::BindLua(lua);

		CNewParticleEffect::BindLua(lua);
		ParticleWrapper::BindLua(lua);
		CDOTAParticleManager::BindLua(lua);
	}
}