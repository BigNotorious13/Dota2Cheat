#include "LuaInitialization.h"

void Lua::InitEnums(sol::state& lua) {
	auto teamTable = lua.create_table_with(
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_GOOD_GUYS),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_BAD_GUYS),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_BROADCASTER),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_SPECTATOR),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_PLAYER_POOL),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_NOTEAM),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_1),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_2),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_3),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_4),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_5),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_6),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_7),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_CUSTOM_8),
		LUA_ENUM_TABLE_ENTRY(DOTA_GC_TEAM_NEUTRALS)
	);
	auto orderTable = lua.create_table_with(
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_NONE),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_TO_POSITION),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_TO_TARGET),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_ATTACK_MOVE),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_ATTACK_TARGET),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_POSITION),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TARGET),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TARGET_TREE),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_NO_TARGET),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TOGGLE),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_HOLD_POSITION),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_TRAIN_ABILITY),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_DROP_ITEM),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_GIVE_ITEM),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PICKUP_ITEM),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PICKUP_RUNE),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PURCHASE_ITEM),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_SELL_ITEM),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_DISASSEMBLE_ITEM),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_ITEM),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_TOGGLE_AUTO),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_STOP),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_TAUNT),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_BUYBACK),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_GLYPH),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_EJECT_ITEM_FROM_STASH),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_RUNE),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PING_ABILITY),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_MOVE_TO_DIRECTION),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PATROL),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_VECTOR_TARGET_POSITION),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_RADAR),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_SET_ITEM_COMBINE_LOCK),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CONTINUE),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_VECTOR_TARGET_CANCELED),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_CAST_RIVER_PAINT),
		LUA_ENUM_TABLE_ENTRY(DOTA_UNIT_ORDER_PREGAME_ADJUST_ITEM_ASSIGNMENT)
	);
	auto orderIssuerTable = lua.create_table_with(
		LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_SELECTED_UNITS),
		LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_CURRENT_UNIT_ONLY),
		LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_HERO_ONLY),
		LUA_ENUM_TABLE_ENTRY(DOTA_ORDER_ISSUER_PASSED_UNIT_ONLY)
	);
	auto pAttachTable = lua.create_table_with(
		LUA_ENUM_TABLE_ENTRY(PATTACH_INVALID),
		LUA_ENUM_TABLE_ENTRY(PATTACH_ABSORIGIN),
		LUA_ENUM_TABLE_ENTRY(PATTACH_ABSORIGIN_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_CUSTOMORIGIN),
		LUA_ENUM_TABLE_ENTRY(PATTACH_CUSTOMORIGIN_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_POINT),
		LUA_ENUM_TABLE_ENTRY(PATTACH_POINT_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_EYES_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_OVERHEAD_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_WORLDORIGIN),
		LUA_ENUM_TABLE_ENTRY(PATTACH_ROOTBONE_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_RENDERORIGIN_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_MAIN_VIEW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_WATERWAKE),
		LUA_ENUM_TABLE_ENTRY(PATTACH_CENTER_FOLLOW),
		LUA_ENUM_TABLE_ENTRY(PATTACH_CUSTOM_GAME_STATE_1),
		LUA_ENUM_TABLE_ENTRY(PATTACH_HEALTHBAR),
		LUA_ENUM_TABLE_ENTRY(MAX_PATTACH_TYPES)
	);
	auto stateTable = lua.create_table_with(
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_ROOTED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_DISARMED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_ATTACK_IMMUNE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_SILENCED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_MUTED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_STUNNED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_HEXED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_INVISIBLE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_INVULNERABLE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_MAGIC_IMMUNE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_PROVIDES_VISION),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NIGHTMARED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_BLOCK_DISABLED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_EVADE_DISABLED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_UNSELECTABLE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_CANNOT_TARGET_ENEMIES),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_CANNOT_MISS),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_SPECIALLY_DENIABLE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_FROZEN),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_COMMAND_RESTRICTED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NOT_ON_MINIMAP),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_LOW_ATTACK_PRIORITY),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NO_HEALTH_BAR),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NO_HEALTH_BAR_FOR_ENEMIES),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_FLYING),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NO_UNIT_COLLISION),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NO_TEAM_MOVE_TO),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NO_TEAM_SELECT),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_PASSIVES_DISABLED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_DOMINATED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_BLIND),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_OUT_OF_GAME),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_FAKE_ALLY),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_FLYING_FOR_PATHING_PURPOSES_ONLY),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_TRUESIGHT_IMMUNE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_UNTARGETABLE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_IGNORING_MOVE_AND_ATTACK_ORDERS),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_ALLOW_PATHING_THROUGH_TREES),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_NOT_ON_MINIMAP_FOR_ENEMIES),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_UNSLOWABLE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_TETHERED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_IGNORING_STOP_ORDERS),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_FEARED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_TAUNTED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_CANNOT_BE_MOTION_CONTROLLED),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_FORCED_FLYING_VISION),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_ATTACK_ALLIES),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_ALLOW_PATHING_THROUGH_CLIFFS),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_ALLOW_PATHING_THROUGH_FISSURE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_SPECIALLY_UNDENIABLE),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_ALLOW_PATHING_THROUGH_OBSTRUCTIONS),
		LUA_ENUM_TABLE_ENTRY(MODIFIER_STATE_LAST)
	);
	lua.create_named_table("Enum",
		"PlayerOrderIssuer", orderIssuerTable,
		"DotaUnitOrder", orderTable,
		"PAttach", pAttachTable,
		"DotaTeam", teamTable,
		"ModifierState", stateTable
	);

}

void Lua::SetGlobals(sol::state& lua) {
	lua["ParticleManager"] = GameSystems::ParticleManager;

	ctx.lua["localHero"] = ctx.assignedHero;
	ctx.lua["localPlayer"] = ctx.localPlayer;
}

void Lua::InitInterfaces(sol::state& lua) {
	lua["EntitySystem"] = Interfaces::EntitySystem;
}

void Lua::InitClasses(sol::state& lua) {
#pragma region Base types
	{
		auto type_Vector =lua.new_usertype<Vector>(
			"Vector",
			sol::constructors<Vector(), Vector(float, float, float)>());
		type_Vector["x"] = &Vector::x;
		type_Vector["y"] = &Vector::y;
		type_Vector["z"] = &Vector::z;

		auto type_Vector2 = lua.new_usertype<Vector2D>(
			"Vector2D",
			sol::constructors<Vector2D(float, float)>());
		type_Vector2["x"] = &Vector2D::x;
		type_Vector2["y"] = &Vector2D::y;
		auto type_Color = lua.new_usertype<Color>(
			"Color",
			sol::constructors<Color(unsigned char, unsigned char, unsigned char, unsigned char)>()
			);
		type_Color["RGBA"] = &Color::RGBA;
	}
#pragma endregion

	CSchemaClassBinding::BindLua(lua);
	CEntityIdentity::BindLua(lua);

	CBaseEntity::BindLua(lua);
	{
		auto type = lua.new_usertype<CGameEntitySystem>("CGameEntitySystem");
		type["GetIdentity"] = &CGameEntitySystem::GetIdentity;
		type["GetBaseEntity"] = &CGameEntitySystem::GetEntity<CBaseEntity>;
		type["GetHighestEntityIndex"] = &CGameEntitySystem::GetHighestEntityIndex;
	}
	CDOTAModifier::BindLua(lua);
	CDOTAModifierManager::BindLua(lua);
	CDOTABaseNPC::BindLua(lua);
	CDOTABaseNPC_Hero::BindLua(lua);
	CDOTAPlayerController::BindLua(lua);
	CDOTABaseAbility::BindLua(lua);
	CNewParticleEffect::BindLua(lua);
	ParticleWrapper::BindLua(lua);
	CDOTAParticleManager::BindLua(lua);
	{
		auto type = lua.new_usertype<Context>("Context");
		type["heroes"] = &Context::heroes;
		type["entities"] = &Context::entities;
		lua["ctx"] = std::ref(ctx);
	}
}

void Lua::InitFunctions(sol::state& lua) {
	lua["IsWithinRadius"] = IsWithinRadius;
	lua["CompareDistance"] = CompareDistance;
}
