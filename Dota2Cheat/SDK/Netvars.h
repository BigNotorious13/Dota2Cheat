#pragma once
#include <cstdint>
namespace Netvars {
	namespace C_DOTA_BaseNPC_Hero {
		constexpr uint32_t m_bBuybackDisabled = 0x0; // bitfield:1
		constexpr uint32_t m_iCurrentXP = 0x1768; // int32
		constexpr uint32_t m_iAbilityPoints = 0x176c; // int32
		constexpr uint32_t m_flRespawnTime = 0x1770; // GameTime_t
		constexpr uint32_t m_flRespawnTimePenalty = 0x1774; // float32
		constexpr uint32_t m_flStrength = 0x1778; // float32
		constexpr uint32_t m_flAgility = 0x177c; // float32
		constexpr uint32_t m_flIntellect = 0x1780; // float32
		constexpr uint32_t m_flStrengthTotal = 0x1784; // float32
		constexpr uint32_t m_flAgilityTotal = 0x1788; // float32
		constexpr uint32_t m_flIntellectTotal = 0x178c; // float32
		constexpr uint32_t m_iRecentDamage = 0x1790; // int32
		constexpr uint32_t m_fPainFactor = 0x1794; // float32
		constexpr uint32_t m_fTargetPainFactor = 0x1798; // float32
		constexpr uint32_t m_bLifeState = 0x179c; // bool
		constexpr uint32_t m_nFXStunIndex = 0x17a0; // ParticleIndex_t
		constexpr uint32_t m_nFXSilenceIndex = 0x17a4; // ParticleIndex_t
		constexpr uint32_t m_nFXDeathIndex = 0x17a8; // ParticleIndex_t
		constexpr uint32_t m_iPlayerID = 0x17d0; // PlayerID_t
		constexpr uint32_t m_hReplicatingOtherHeroModel = 0x17d4; // CHandle< C_DOTA_BaseNPC_Hero >
		constexpr uint32_t m_bReincarnating = 0x17d8; // bool
		constexpr uint32_t m_bCustomKillEffect = 0x17d9; // bool
		constexpr uint32_t m_flSpawnedAt = 0x17dc; // GameTime_t
		constexpr uint32_t m_bScriptDisableRespawns = 0x17e0; // bool
		constexpr uint32_t m_iPrimaryAttribute = 0x17e4; // int32
		constexpr uint32_t m_nLastDrawnHealth = 0x17e8; // int32
		constexpr uint32_t m_flHurtAmount = 0x17ec; // float32
		constexpr uint32_t m_flLastHurtTime = 0x17f0; // GameTime_t
		constexpr uint32_t m_flHurtDecayRate = 0x17f4; // float32
		constexpr uint32_t m_flLastHealTime = 0x17f8; // GameTime_t
		constexpr uint32_t m_flLastTreeShakeTime = 0x17fc; // GameTime_t
		constexpr uint32_t m_CenterOnHeroCooldownTimer = 0x1800; // CountdownTimer
		constexpr uint32_t m_CombinedModels = 0x1a20; // CStrongHandle< InfoForResourceTypeCModel >[4]
		constexpr uint32_t m_nCurrentCombinedModelIndex = 0x1a40; // int32
		constexpr uint32_t m_nPendingCombinedModelIndex = 0x1a44; // int32
		constexpr uint32_t m_iHeroID = 0x1a48; // int32
		constexpr uint32_t m_flCheckLegacyItemsAt = 0x1a4c; // float32
		constexpr uint32_t m_bDisplayAdditionalHeroes = 0x1a50; // bool
		constexpr uint32_t m_CombinedParticleModels = 0x1a60; // CStrongHandle< InfoForResourceTypeCModel >[4]
		constexpr uint32_t m_vecAttachedParticleIndeces = 0x1a80; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_hPets = 0x1a98; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_nKillStreakFX = 0x1ab0; // ParticleIndex_t
		constexpr uint32_t m_nKillStreakFXTier = 0x1ab4; // int32
	}
	namespace CEntityIdentity {
		constexpr uint32_t m_nameStringableIndex = 0x14; // int32
		constexpr uint32_t m_name = 0x18; // CUtlSymbolLarge
		constexpr uint32_t m_designerName = 0x20; // CUtlSymbolLarge
		constexpr uint32_t m_flags = 0x30; // uint32
		constexpr uint32_t m_worldGroupId = 0x38; // WorldGroupId_t
		constexpr uint32_t m_fDataObjectTypes = 0x3c; // uint32
		constexpr uint32_t m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
		constexpr uint32_t m_pPrev = 0x58; // CEntityIdentity*
		constexpr uint32_t m_pNext = 0x60; // CEntityIdentity*
		constexpr uint32_t m_pPrevByClass = 0x68; // CEntityIdentity*
		constexpr uint32_t m_pNextByClass = 0x70; // CEntityIdentity*
	}
	namespace C_BaseEntity {
		constexpr uint32_t m_CBodyComponent = 0x38; // CBodyComponent*
		constexpr uint32_t m_NetworkTransmitComponent = 0x40; // CNetworkTransmitComponent
		constexpr uint32_t m_nLastThinkTick = 0x300; // GameTick_t
		constexpr uint32_t m_pGameSceneNode = 0x308; // CGameSceneNode*
		constexpr uint32_t m_pRenderComponent = 0x310; // CRenderComponent*
		constexpr uint32_t m_pCollision = 0x318; // CCollisionProperty*
		constexpr uint32_t m_iMaxHealth = 0x320; // int32
		constexpr uint32_t m_iHealth = 0x324; // int32
		constexpr uint32_t m_lifeState = 0x328; // uint8
		constexpr uint32_t m_takedamage = 0x329; // DamageOptions_t
		constexpr uint32_t m_bTakesDamage = 0x32a; // bool
		constexpr uint32_t m_nTakeDamageFlags = 0x32c; // TakeDamageFlags_t
		constexpr uint32_t m_bIsPlatform = 0x330; // bool
		constexpr uint32_t m_ubInterpolationFrame = 0x331; // uint8
		constexpr uint32_t m_hSceneObjectController = 0x334; // CHandle< C_BaseEntity >
		constexpr uint32_t m_nNoInterpolationTick = 0x338; // int32
		constexpr uint32_t m_nVisibilityNoInterpolationTick = 0x33c; // int32
		constexpr uint32_t m_flProxyRandomValue = 0x340; // float32
		constexpr uint32_t m_iEFlags = 0x344; // int32
		constexpr uint32_t m_nWaterType = 0x348; // uint8
		constexpr uint32_t m_bInterpolateEvenWithNoModel = 0x349; // bool
		constexpr uint32_t m_bPredictionEligible = 0x34a; // bool
		constexpr uint32_t m_bApplyLayerMatchIDToModel = 0x34b; // bool
		constexpr uint32_t m_tokLayerMatchID = 0x34c; // CUtlStringToken
		constexpr uint32_t m_nSubclassID = 0x350; // CUtlStringToken
		constexpr uint32_t m_nSimulationTick = 0x360; // int32
		constexpr uint32_t m_iCurrentThinkContext = 0x364; // int32
		constexpr uint32_t m_aThinkFunctions = 0x368; // CUtlVector< thinkfunc_t >
		constexpr uint32_t m_bDisabledContextThinks = 0x380; // bool
		constexpr uint32_t m_flAnimTime = 0x384; // float32
		constexpr uint32_t m_flSimulationTime = 0x388; // float32
		constexpr uint32_t m_nSceneObjectOverrideFlags = 0x38c; // uint8
		constexpr uint32_t m_bHasSuccessfullyInterpolated = 0x38d; // bool
		constexpr uint32_t m_bHasAddedVarsToInterpolation = 0x38e; // bool
		constexpr uint32_t m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x38f; // bool
		constexpr uint32_t m_nInterpolationLatchDirtyFlags = 0x390; // int32[2]
		constexpr uint32_t m_ListEntry = 0x398; // uint16[11]
		constexpr uint32_t m_flCreateTime = 0x3b0; // GameTime_t
		constexpr uint32_t m_flSpeed = 0x3b4; // float32
		constexpr uint32_t m_EntClientFlags = 0x3b8; // uint16
		constexpr uint32_t m_bClientSideRagdoll = 0x3ba; // bool
		constexpr uint32_t m_iTeamNum = 0x3bb; // uint8
		constexpr uint32_t m_spawnflags = 0x3bc; // uint32
		constexpr uint32_t m_nNextThinkTick = 0x3c0; // GameTick_t
		constexpr uint32_t m_fFlags = 0x3c4; // uint32
		constexpr uint32_t m_vecAbsVelocity = 0x3c8; // Vector
		constexpr uint32_t m_vecVelocity = 0x3d8; // CNetworkVelocityVector
		constexpr uint32_t m_hEffectEntity = 0x408; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hOwnerEntity = 0x40c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_MoveCollide = 0x410; // MoveCollide_t
		constexpr uint32_t m_MoveType = 0x411; // MoveType_t
		constexpr uint32_t m_nActualMoveType = 0x412; // MoveType_t
		constexpr uint32_t m_flWaterLevel = 0x414; // float32
		constexpr uint32_t m_fEffects = 0x418; // uint32
		constexpr uint32_t m_hGroundEntity = 0x41c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_nGroundBodyIndex = 0x420; // int32
		constexpr uint32_t m_flFriction = 0x424; // float32
		constexpr uint32_t m_flElasticity = 0x428; // float32
		constexpr uint32_t m_flGravityScale = 0x42c; // float32
		constexpr uint32_t m_flTimeScale = 0x430; // float32
		constexpr uint32_t m_bAnimatedEveryTick = 0x434; // bool
		constexpr uint32_t m_flNavIgnoreUntilTime = 0x438; // GameTime_t
		constexpr uint32_t m_hThink = 0x43c; // uint16
		constexpr uint32_t m_fBBoxVisFlags = 0x448; // uint8
		constexpr uint32_t m_bPredictable = 0x449; // bool
		constexpr uint32_t m_bRenderWithViewModels = 0x44a; // bool
		constexpr uint32_t m_nSplitUserPlayerPredictionSlot = 0x44c; // CSplitScreenSlot
		constexpr uint32_t m_nFirstPredictableCommand = 0x450; // int32
		constexpr uint32_t m_nLastPredictableCommand = 0x454; // int32
		constexpr uint32_t m_hOldMoveParent = 0x458; // CHandle< C_BaseEntity >
		constexpr uint32_t m_Particles = 0x460; // CParticleProperty
		constexpr uint32_t m_vecPredictedScriptFloats = 0x488; // CUtlVector< float32 >
		constexpr uint32_t m_vecPredictedScriptFloatIDs = 0x4a0; // CUtlVector< int32 >
		constexpr uint32_t m_nNextScriptVarRecordID = 0x4d0; // int32
		constexpr uint32_t m_vecAngVelocity = 0x4e0; // QAngle
		constexpr uint32_t m_DataChangeEventRef = 0x4ec; // int32
		constexpr uint32_t m_dependencies = 0x4f0; // CUtlVector< CEntityHandle >
		constexpr uint32_t m_nCreationTick = 0x508; // int32
		constexpr uint32_t m_bAnimTimeChanged = 0x515; // bool
		constexpr uint32_t m_bSimulationTimeChanged = 0x516; // bool
		constexpr uint32_t m_sUniqueHammerID = 0x520; // CUtlString
	}
	namespace C_EconEntity {
		constexpr uint32_t m_AttributeManager = 0x968; // CAttributeContainer
		constexpr uint32_t m_bClientside = 0xa90; // bool
		constexpr uint32_t m_nDisableMode = 0xa94; // EconEntityParticleDisableMode_t
		constexpr uint32_t m_bParticleSystemsCreated = 0xa98; // bool
		constexpr uint32_t m_bForceDestroyAttachedParticlesImmediately = 0xa99; // bool
		constexpr uint32_t m_vecAttachedParticles = 0xaa0; // CUtlVector< C_EconEntity::AttachedParticleInfo_t >
		constexpr uint32_t m_hViewmodelAttachment = 0xab8; // CHandle< CBaseAnimatingActivity >
		constexpr uint32_t m_iOldTeam = 0xabc; // int32
		constexpr uint32_t m_bAttachmentDirty = 0xac0; // bool
		constexpr uint32_t m_iOldStyle = 0xac1; // style_index_t
		constexpr uint32_t m_hOldProvidee = 0xac4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_vecAttachedModels = 0xac8; // CUtlVector< C_EconEntity::AttachedModelData_t >
	}
	namespace C_DOTA_Item {
		constexpr uint32_t m_CastAnimation = 0x5a8; // int32
		constexpr uint32_t m_bCombinable = 0x5ac; // bool
		constexpr uint32_t m_bPermanent = 0x5ad; // bool
		constexpr uint32_t m_bStackable = 0x5ae; // bool
		constexpr uint32_t m_iStackableMax = 0x5b0; // int32
		constexpr uint32_t m_bRecipe = 0x5b4; // bool
		constexpr uint32_t m_bRecipeConsumesCharges = 0x5b5; // bool
		constexpr uint32_t m_iSharability = 0x5b8; // int32
		constexpr uint32_t m_bDroppable = 0x5bc; // bool
		constexpr uint32_t m_bPurchasable = 0x5bd; // bool
		constexpr uint32_t m_bSellable = 0x5be; // bool
		constexpr uint32_t m_bInitiallySellable = 0x5bf; // bool
		constexpr uint32_t m_bForceUnsellable = 0x5c0; // bool
		constexpr uint32_t m_bRequiresCharges = 0x5c1; // bool
		constexpr uint32_t m_bDisplayCharges = 0x5c2; // bool
		constexpr uint32_t m_bHideCharges = 0x5c3; // bool
		constexpr uint32_t m_bKillable = 0x5c4; // bool
		constexpr uint32_t m_bGloballyCombinable = 0x5c5; // bool
		constexpr uint32_t m_bDisassemblable = 0x5c6; // bool
		constexpr uint32_t m_bIsNeutralDrop = 0x5c7; // bool
		constexpr uint32_t m_nNeutralDropTeam = 0x5c8; // int32
		constexpr uint32_t m_bAlertable = 0x5cc; // bool
		constexpr uint32_t m_iInitialCharges = 0x5d0; // int32
		constexpr uint32_t m_bCastOnPickup = 0x5d4; // bool
		constexpr uint32_t m_bOnlyPlayerHeroPickup = 0x5d5; // bool
		constexpr uint32_t m_bCreepHeroPickup = 0x5d6; // bool
		constexpr uint32_t m_iValuelessCharges = 0x5d8; // int32
		constexpr uint32_t m_iCurrentCharges = 0x5dc; // int32
		constexpr uint32_t m_iSecondaryCharges = 0x5e0; // int32
		constexpr uint32_t m_iMaxCharges = 0x5e4; // int32
		constexpr uint32_t m_bCombineLocked = 0x5e8; // bool
		constexpr uint32_t m_flPurchaseTime = 0x5ec; // GameTime_t
		constexpr uint32_t m_flAssembledTime = 0x5f0; // GameTime_t
		constexpr uint32_t m_bPurchasedWhileDead = 0x5f4; // bool
		constexpr uint32_t m_bCanBeUsedOutOfInventory = 0x5f5; // bool
		constexpr uint32_t m_bItemEnabled = 0x5f6; // bool
		constexpr uint32_t m_flEnableTime = 0x5f8; // GameTime_t
		constexpr uint32_t m_flReclaimTime = 0x5fc; // GameTime_t
		constexpr uint32_t m_bDisplayOwnership = 0x600; // bool
		constexpr uint32_t m_bShowOnMinimap = 0x601; // bool
		constexpr uint32_t m_flMinimapIconSize = 0x604; // float32
		constexpr uint32_t m_bIsUpgradeable = 0x608; // bool
		constexpr uint32_t m_nUpgradeProgress = 0x60c; // int32
		constexpr uint32_t m_nUpgradeGoal = 0x610; // int32
		constexpr uint32_t m_hOldOwnerEntity = 0x614; // CHandle< C_BaseEntity >
		constexpr uint32_t m_iOldCharges = 0x618; // int32
		constexpr uint32_t m_iPlayerOwnerID = 0x61c; // PlayerID_t
		constexpr uint32_t m_vecPreGameTransferPlayerIDs = 0x620; // C_NetworkUtlVectorBase< uint8 >
	}
	namespace PlayerResourcePlayerData_t {
		constexpr uint32_t m_bIsValid = 0x30; // bool
		constexpr uint32_t m_iszPlayerName = 0x38; // CUtlSymbolLarge
		constexpr uint32_t m_iPlayerTeam = 0x40; // int32
		constexpr uint32_t m_bFullyJoinedServer = 0x44; // bool
		constexpr uint32_t m_bFakeClient = 0x45; // bool
		constexpr uint32_t m_bIsBroadcaster = 0x46; // bool
		constexpr uint32_t m_iBroadcasterChannel = 0x48; // uint32
		constexpr uint32_t m_iBroadcasterChannelSlot = 0x4c; // uint32
		constexpr uint32_t m_bIsBroadcasterChannelCameraman = 0x50; // bool
		constexpr uint32_t m_iConnectionState = 0x54; // int32
		constexpr uint32_t m_iPlayerSteamID = 0x58; // uint64
		constexpr uint32_t m_eCoachTeam = 0x60; // DOTATeam_t
		constexpr uint32_t m_vecPrivateCoachPlayerIDs = 0x68; // C_NetworkUtlVectorBase< PlayerID_t >
		constexpr uint32_t m_unCoachRating = 0x80; // uint32
		constexpr uint32_t m_eLiveSpectatorTeam = 0x84; // DOTATeam_t
		constexpr uint32_t m_nLiveSpectatorSpectatedHeroIndex = 0x88; // int32
		constexpr uint32_t m_bIsPlusSubscriber = 0x8c; // bool
		constexpr uint32_t m_bWasMVPLastGame = 0x8d; // bool
		constexpr uint32_t m_nCavernCrawlMapVariant = 0x8e; // CavernCrawlMapVariant_t
		constexpr uint32_t m_eAccoladeType = 0x90; // int32[3]
		constexpr uint32_t m_unAccoladeData = 0xa0; // uint64[3]
		constexpr uint32_t m_iRankTier = 0xb8; // int32
		constexpr uint32_t m_iTitle = 0xbc; // int32
		constexpr uint32_t m_unFavTeamPacked = 0xc0; // uint64
		constexpr uint32_t m_nPlayerSlot = 0xc8; // CPlayerSlot
		constexpr uint32_t m_bIsBot = 0xcc; // bool
		constexpr uint32_t m_bHasNeutralTier = 0xcd; // bool[5]
		constexpr uint32_t m_bHasRedeemedNeutralTier = 0xd2; // bool[5]
		constexpr uint32_t m_nCommLevel = 0xd8; // int32
		constexpr uint32_t m_nBehaviorLevel = 0xdc; // int32
		constexpr uint32_t m_flLastCommsTime = 0xe0; // float32
	}
	namespace C_DOTABaseAbility {
		constexpr uint32_t m_bAuxCastState = 0x530; // bool
		constexpr uint32_t m_iEnemyLevel = 0x534; // int32
		constexpr uint32_t m_iMaxLevel = 0x538; // int32
		constexpr uint32_t m_bCanLearn = 0x53c; // bool
		constexpr uint32_t m_flUpgradeBlend = 0x540; // float32
		constexpr uint32_t m_bUpgradedDuringQuickcastPreview = 0x544; // bool
		constexpr uint32_t m_bConsiderOvershootInGetCastRange = 0x545; // bool
		constexpr uint32_t m_bRefCountsModifiers = 0x546; // bool
		constexpr uint32_t m_bHidden = 0x547; // bool
		constexpr uint32_t m_bOldHidden = 0x548; // bool
		constexpr uint32_t m_bActivated = 0x549; // bool
		constexpr uint32_t m_bOldActivated = 0x54a; // bool
		constexpr uint32_t m_nAbilityBarType = 0x54c; // AbilityBarType_t
		constexpr uint32_t m_iDirtyButtons = 0x550; // int32
		constexpr uint32_t m_bPerformDirtyParity = 0x554; // bool
		constexpr uint32_t m_iLevel = 0x558; // int32
		constexpr uint32_t m_bAbilityLevelDirty = 0x55c; // bool
		constexpr uint32_t m_bToggleState = 0x55d; // bool
		constexpr uint32_t m_flAbilityMuteDuration = 0x560; // float32
		constexpr uint32_t m_bInAbilityPhase = 0x564; // bool
		constexpr uint32_t m_fCooldown = 0x568; // float32
		constexpr uint32_t m_flCooldownLength = 0x56c; // float32
		constexpr uint32_t m_iManaCost = 0x570; // int32
		constexpr uint32_t m_bAutoCastState = 0x574; // bool
		constexpr uint32_t m_bAltCastState = 0x575; // bool
		constexpr uint32_t m_flChannelStartTime = 0x578; // GameTime_t
		constexpr uint32_t m_flCastStartTime = 0x57c; // GameTime_t
		constexpr uint32_t m_bInIndefiniteCooldown = 0x580; // bool
		constexpr uint32_t m_bFrozenCooldown = 0x581; // bool
		constexpr uint32_t m_flOverrideCastPoint = 0x584; // float32
		constexpr uint32_t m_bStolen = 0x588; // bool
		constexpr uint32_t m_bStealable = 0x589; // bool
		constexpr uint32_t m_bReplicated = 0x58a; // bool
		constexpr uint32_t m_nAbilityCurrentCharges = 0x58c; // int32
		constexpr uint32_t m_fAbilityChargeRestoreTimeRemaining = 0x590; // float32
		constexpr uint32_t m_bUpgradeRecommended = 0x594; // bool
		constexpr uint32_t m_nMaxLevelOverride = 0x598; // int32
		constexpr uint32_t m_flTotalExtendedChannelTime = 0x59c; // float32
		constexpr uint32_t m_flLastCastClickTime = 0x5a0; // float32
	}
	namespace C_DOTA_Item_PowerTreads {
		constexpr uint32_t m_iStat = 0x640; // int32
	}
	namespace C_DOTA_BaseNPC {
		constexpr uint32_t m_bIsPhantom = 0xa20; // bool
		constexpr uint32_t m_iUnitType = 0xa24; // uint32
		constexpr uint32_t m_bSelectionRingVisible = 0xa38; // bool
		constexpr uint32_t m_iCurrentLevel = 0xa3c; // int32
		constexpr uint32_t m_bIsAncient = 0xa40; // bool
		constexpr uint32_t m_bIsBossCreature = 0xa41; // bool
		constexpr uint32_t m_bStolenScepter = 0xa42; // bool
		constexpr uint32_t m_bIsNeutralUnitType = 0xa43; // bool
		constexpr uint32_t m_bSelectOnSpawn = 0xa44; // bool
		constexpr uint32_t m_bCachedReplicatedMorphlingIllusion = 0xa45; // bool
		constexpr uint32_t m_bIgnoreAddSummonedToSelection = 0xa46; // bool
		constexpr uint32_t m_bConsideredHero = 0xa47; // bool
		constexpr uint32_t m_bUsesConstantGesture = 0xa48; // bool
		constexpr uint32_t m_bUseHeroAbilityNumbers = 0xa49; // bool
		constexpr uint32_t m_bHasSharedAbilities = 0xa4a; // bool
		constexpr uint32_t m_bIsSummoned = 0xa4b; // bool
		constexpr uint32_t m_bCanBeDominated = 0xa4c; // bool
		constexpr uint32_t m_bHasUpgradeableAbilities = 0xa4d; // bool
		constexpr uint32_t m_flHealthThinkRegen = 0xa50; // float32
		constexpr uint32_t m_iIsControllableByPlayer64 = 0xa58; // uint64
		constexpr uint32_t m_nHealthBarOffsetOverride = 0xa60; // int32
		constexpr uint32_t m_bCanRespawn = 0xa64; // bool
		constexpr uint32_t m_iAttackRange = 0xa68; // int32
		constexpr uint32_t m_colorGemColor = 0xa6c; // Color
		constexpr uint32_t m_bHasColorGem = 0xa70; // bool
		constexpr uint32_t m_nFXDeniableIndex = 0xa74; // ParticleIndex_t
		constexpr uint32_t m_iMoveSpeed = 0xa78; // int32
		constexpr uint32_t m_iBaseAttackSpeed = 0xa7c; // int32
		constexpr uint32_t m_flBaseAttackTime = 0xa80; // float32
		constexpr uint32_t m_iUnitNameIndex = 0xa84; // int32
		constexpr uint32_t m_iHealthBarOffset = 0xa88; // int32
		constexpr uint32_t m_iHealthBarHighlightColor = 0xa8c; // Color
		constexpr uint32_t m_flMana = 0xa90; // float32
		constexpr uint32_t m_flMaxMana = 0xa94; // float32
		constexpr uint32_t m_flManaThinkRegen = 0xa98; // float32
		constexpr uint32_t m_iBKBChargesUsed = 0xa9c; // int32
		constexpr uint32_t m_iAeonChargesUsed = 0xaa0; // int32
		constexpr uint32_t m_flRefresherUseTime = 0xaa4; // GameTime_t
		constexpr uint32_t m_flRefresherLastCooldown = 0xaa8; // float32
		constexpr uint32_t m_flLastDealtDamageTime = 0xaac; // GameTime_t
		constexpr uint32_t m_iBotDebugData = 0xab0; // int32
		constexpr uint32_t m_bIsIllusion = 0xab4; // bool
		constexpr uint32_t m_bHasClientSeenIllusionModifier = 0xab5; // bool
		constexpr uint32_t m_hAbilities = 0xab8; // CHandle< C_BaseEntity >[35]
		constexpr uint32_t m_flInvisibilityLevel = 0xb44; // float32
		constexpr uint32_t m_flHullRadius = 0xb48; // float32
		constexpr uint32_t m_flCollisionPadding = 0xb4c; // float32
		constexpr uint32_t m_flRingRadius = 0xb50; // float32
		constexpr uint32_t m_flProjectileCollisionSize = 0xb54; // float32
		constexpr uint32_t m_iszUnitName = 0xb58; // CUtlSymbolLarge
		constexpr uint32_t m_iszUnitNameIconOverride = 0xb60; // CUtlSymbolLarge
		constexpr uint32_t m_iszParticleFolder = 0xb68; // CUtlSymbolLarge
		constexpr uint32_t m_iszSoundSet = 0xb70; // CUtlSymbolLarge
		constexpr uint32_t m_iszSelectionGroup = 0xb78; // CUtlSymbolLarge
		constexpr uint32_t m_iszVoiceFile = 0xb80; // CUtlSymbolLarge
		constexpr uint32_t m_iszGameSoundsFile = 0xb88; // CUtlSymbolLarge
		constexpr uint32_t m_iszVoiceBackgroundSound = 0xb90; // CUtlSymbolLarge
		constexpr uint32_t m_iszIdleSoundLoop = 0xb98; // CUtlSymbolLarge
		constexpr uint32_t m_szUnitLabel = 0xba0; // CUtlString
		constexpr uint32_t m_szScaleset = 0xba8; // CUtlString
		constexpr uint32_t m_nUnitLabelIndex = 0xbb0; // uint8
		constexpr uint32_t m_strAnimationModifier = 0xbb8; // CUtlString
		constexpr uint32_t m_TerrainSpecificFootstepEffect = 0xbc0; // CUtlString
		constexpr uint32_t m_bUseCustomTerrainWeatherEffect = 0xbc8; // bool
		constexpr uint32_t m_bHasClientSoundReplacement = 0xbc9; // bool
		constexpr uint32_t m_bHasClientReplacementParticle = 0xbca; // bool
		constexpr uint32_t m_bResourcesLoaded = 0xbd4; // bool
		constexpr uint32_t m_flTauntCooldown = 0xbd8; // GameTime_t
		constexpr uint32_t m_flTauntCooldown2 = 0xbdc; // GameTime_t
		constexpr uint32_t m_iCurShop = 0xbe0; // DOTA_SHOP_TYPE
		constexpr uint32_t m_szCurShopEntName = 0xbe8; // CUtlSymbolLarge
		constexpr uint32_t m_iDayTimeVisionRange = 0xbf0; // int32
		constexpr uint32_t m_iNightTimeVisionRange = 0xbf4; // int32
		constexpr uint32_t m_iDamageMin = 0xbf8; // int32
		constexpr uint32_t m_iDamageMax = 0xbfc; // int32
		constexpr uint32_t m_iDamageBonus = 0xc00; // int32
		constexpr uint32_t m_iTaggedAsVisibleByTeam = 0xc04; // int32
		constexpr uint32_t m_ModifierManager = 0xc08; // CDOTA_ModifierManager
		constexpr uint32_t m_Inventory = 0xeb0; // C_DOTA_UnitInventory
		constexpr uint32_t m_nUnitState64 = 0xf88; // uint64
		constexpr uint32_t m_nUnitDebuffState = 0xf98; // uint64
		constexpr uint32_t m_bHasInventory = 0xfa0; // bool
		constexpr uint32_t m_iAcquisitionRange = 0xfa4; // int32
		constexpr uint32_t m_FoWViewID = 0xfa8; // int32
		constexpr uint32_t m_iPrevHealthPct = 0xfac; // int32
		constexpr uint32_t m_iPrevLifeState = 0xfb0; // int32
		constexpr uint32_t m_iPrevTeam = 0xfb4; // int32
		constexpr uint32_t m_bPrevProvidesVision = 0xfb8; // bool
		constexpr uint32_t m_nPrevControllableMask = 0xfc0; // uint64
		constexpr uint32_t m_TagTime = 0xfd0; // CountdownTimer
		constexpr uint32_t m_ClickedTime = 0xfe8; // CountdownTimer
		constexpr uint32_t m_flIdleRunPoseStartTime = 0x1000; // GameTime_t[2]
		constexpr uint32_t m_flIdleRunPoseDuration = 0x1008; // float32[2]
		constexpr uint32_t m_bAnimationTransitionActive = 0x1010; // bool
		constexpr uint32_t m_nAnimationTransitionPoseParameters = 0x1014; // int32[2]
		constexpr uint32_t m_nAnimationTransitionInjuredPoseParameters = 0x101c; // int32[2]
		constexpr uint32_t m_nAnimationTransitionAggressivePoseParameters = 0x1024; // int32[2]
		constexpr uint32_t m_flTimeSinceLastAbilityNag = 0x1088; // GameTime_t
		constexpr uint32_t m_iAttackCapabilities = 0x108c; // int32
		constexpr uint32_t m_iSpecialAbility = 0x1090; // int32
		constexpr uint32_t m_iMoveCapabilities = 0x1094; // int32
		constexpr uint32_t m_nPlayerOwnerID = 0x1098; // PlayerID_t
		constexpr uint32_t m_flLastDamageTime = 0x109c; // GameTime_t
		constexpr uint32_t m_flLastAttackTime = 0x10a0; // GameTime_t
		constexpr uint32_t m_iszMinimapIcon = 0x10a8; // CUtlSymbolLarge
		constexpr uint32_t m_flMinimapIconSize = 0x10b8; // float32
		constexpr uint32_t m_bMinimapDisableTint = 0x10bc; // bool
		constexpr uint32_t m_bMinimapDisableRotation = 0x10bd; // bool
		constexpr uint32_t m_colorHeroGlow = 0x10be; // Color
		constexpr uint32_t m_iNearShopMask = 0x10c4; // int32
		constexpr uint32_t m_nPoseParameterTurn = 0x10c8; // int32
		constexpr uint32_t m_nPoseParameterRun = 0x10cc; // int32
		constexpr uint32_t m_flLean = 0x10d0; // float32
		constexpr uint32_t m_flRun = 0x10d4; // float32
		constexpr uint32_t m_anglediff = 0x10d8; // int32
		constexpr uint32_t m_bInfoKeyActive = 0x10dc; // bool
		constexpr uint32_t m_bNewUpdateAssetModifiersNetworked = 0x10dd; // bool
		constexpr uint32_t m_nAssetModifiersLastUpdatedTick = 0x10e0; // GameTick_t
		constexpr uint32_t m_bSuppressGlow = 0x10e4; // bool
		constexpr uint32_t m_bWasSinking = 0x10e5; // bool
		constexpr uint32_t m_flRangeDisplayDist = 0x10e8; // float32
		constexpr uint32_t m_szDefaultIdle = 0x12d0; // CUtlSymbolLarge
		constexpr uint32_t m_szDefaultRareIdle = 0x12d8; // CUtlSymbolLarge
		constexpr uint32_t m_damagetimer = 0x12e0; // CountdownTimer
		constexpr uint32_t m_vRenderOrigin = 0x12f8; // Vector
		constexpr uint32_t m_fZDelta = 0x1304; // float32
		constexpr uint32_t m_flDeathTime = 0x1308; // GameTime_t
		constexpr uint32_t m_bBaseStatsChanged = 0x130c; // bool
		constexpr uint32_t m_bNeedsSoundEmitterRefresh = 0x130d; // bool
		constexpr uint32_t m_flPhysicalArmorValue = 0x1310; // float32
		constexpr uint32_t m_flMagicalResistanceValue = 0x1314; // float32
		constexpr uint32_t m_nPrevSequenceParity = 0x1318; // int32
		constexpr uint32_t m_flPrevInvisLevel = 0x13c0; // float32
		constexpr uint32_t m_nOriginalModelIndex = 0x13c8; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_nClientOriginalModelIndex = 0x13d0; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_nClientReplacementModelIndex = 0x13d8; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_bClientReplacementModelNeedsRebuild = 0x13e0; // bool
		constexpr uint32_t m_nClientReplacementModelReloadCount = 0x13e4; // int32
		constexpr uint32_t m_nUnitModelVariant = 0x13e8; // int8
		constexpr uint32_t m_nUnitModelVariantCount = 0x13e9; // int8
		constexpr uint32_t m_iPrevSequence = 0x13ec; // int32
		constexpr uint32_t m_pLastWeatherEffectName = 0x13f0; // char*
		constexpr uint32_t m_VoiceBackgroundSoundTimer = 0x1400; // CountdownTimer
		constexpr uint32_t m_bIsWaitingToSpawn = 0x1418; // bool
		constexpr uint32_t m_nTotalDamageTaken = 0x1420; // int64
		constexpr uint32_t m_flManaRegen = 0x1428; // float32
		constexpr uint32_t m_flHealthRegen = 0x142c; // float32
		constexpr uint32_t m_bIsMoving = 0x1430; // bool
		constexpr uint32_t m_fRevealRadius = 0x1434; // float32
		constexpr uint32_t m_bCanUseWards = 0x1438; // bool
		constexpr uint32_t m_bCanUseAllItems = 0x1439; // bool
		constexpr uint32_t m_iXPBounty = 0x143c; // int32
		constexpr uint32_t m_iXPBountyExtra = 0x1440; // int32
		constexpr uint32_t m_iGoldBountyMin = 0x1444; // int32
		constexpr uint32_t m_iGoldBountyMax = 0x1448; // int32
		constexpr uint32_t m_hOwnerNPC = 0x144c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hGoalEntity = 0x1450; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hNeutralSpawner = 0x1454; // CHandle< C_DOTA_NeutralSpawner >
		constexpr uint32_t m_hClientOverrideMaterial = 0x1458; // CStrongHandle< InfoForResourceTypeIMaterial2 >
		constexpr uint32_t m_bCombinerMaterialOverrideListChanged = 0x1460; // bool
		constexpr uint32_t m_nBaseModelMeshCount = 0x1464; // int32
		constexpr uint32_t m_combinerMaterialOverrideList = 0x1468; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
		constexpr uint32_t m_nArcanaLevel = 0x1480; // int8
		constexpr uint32_t m_nDefaultArcanaLevel = 0x1481; // int8
		constexpr uint32_t m_defaultColorGemColor = 0x1482; // Color
		constexpr uint32_t m_bHasBuiltWearableSpawnList = 0x14a0; // bool
		constexpr uint32_t m_bHasCostume = 0x14a1; // bool
		constexpr uint32_t m_bRecreateParticleSystemsOnModifiersChange = 0x14a2; // bool
		constexpr uint32_t m_flAdditionalSinkDelay = 0x14bc; // float32
		constexpr uint32_t m_NetworkActivity = 0x15a0; // int32
		constexpr uint32_t m_PrevNetworkActivity = 0x15a4; // int32
		constexpr uint32_t m_NetworkSequenceIndex = 0x15a8; // int32
		constexpr uint32_t m_bShouldDoFlyHeightVisual = 0x15ac; // bool
		constexpr uint32_t m_flStartSequenceCycle = 0x15b0; // float32
		constexpr uint32_t m_ActivityModifiers = 0x15b8; // CUtlVector< CUtlSymbol >
		constexpr uint32_t m_hBackgroundSceneEnt = 0x15d0; // CHandle< C_SceneEntity >
		constexpr uint32_t m_hSpeakingSceneEnt = 0x15d4; // CHandle< C_SceneEntity >
		constexpr uint32_t m_hOldWearables = 0x15e8; // CUtlVector< CHandle< C_EconWearable > >
		constexpr uint32_t m_hOldWearableSkins = 0x1600; // CUtlVector< CUtlStringToken >
		constexpr uint32_t m_CustomHealthLabel = 0x1618; // char[256]
		constexpr uint32_t m_CustomHealthLabelColor = 0x1718; // Color
		constexpr uint32_t m_nWearableDefIndex = 0x171c; // item_definition_index_t
		constexpr uint32_t m_gibTintColor = 0x1721; // Color
		constexpr uint32_t m_bForceMaterialCombine = 0x1725; // bool
		constexpr uint32_t m_bShouldDrawParticlesWhileHidden = 0x1726; // bool
		constexpr uint32_t m_bIsClientThinkPending = 0x1727; // bool
		constexpr uint32_t m_bActivityModifiersDirty = 0x1728; // bool
		constexpr uint32_t m_bUnitModelVariantChanged = 0x1729; // bool
		constexpr uint32_t m_bWearablesAreTaunting = 0x172a; // bool
		constexpr uint32_t m_bShowCannotBeDisabledIcon = 0x1740; // bool
	}
	namespace CBasePlayerController {
		constexpr uint32_t m_nFinalPredictedTick = 0x530; // int32
		constexpr uint32_t m_CommandContext = 0x538; // C_CommandContext
		constexpr uint32_t m_nInButtonsWhichAreToggles = 0x5c8; // uint64
		constexpr uint32_t m_nTickBase = 0x5d0; // uint32
		constexpr uint32_t m_hPawn = 0x5d4; // CHandle< C_BasePlayerPawn >
		constexpr uint32_t m_hPredictedPawn = 0x5d8; // CHandle< C_BasePlayerPawn >
		constexpr uint32_t m_nSplitScreenSlot = 0x5dc; // CSplitScreenSlot
		constexpr uint32_t m_hSplitOwner = 0x5e0; // CHandle< CBasePlayerController >
		constexpr uint32_t m_hSplitScreenPlayers = 0x5e8; // CUtlVector< CHandle< CBasePlayerController > >
		constexpr uint32_t m_bIsHLTV = 0x600; // bool
		constexpr uint32_t m_iConnected = 0x604; // PlayerConnectedState
		constexpr uint32_t m_iszPlayerName = 0x608; // char[128]
		constexpr uint32_t m_steamID = 0x690; // uint64
		constexpr uint32_t m_bIsLocalPlayerController = 0x698; // bool
		constexpr uint32_t m_iDesiredFOV = 0x69c; // uint32
	}
	namespace CEntityInstance {
		constexpr uint32_t m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
		constexpr uint32_t m_pEntity = 0x10; // CEntityIdentity*
		constexpr uint32_t m_CScriptComponent = 0x28; // CScriptComponent*
		constexpr uint32_t m_bVisibleinPVS = 0x30; // bool
	}
	namespace C_NextBotCombatCharacter {
		constexpr uint32_t m_shadowTimer = 0x9e8; // CountdownTimer
		constexpr uint32_t m_bInFrustum = 0xa00; // bool
		constexpr uint32_t m_nInFrustumFrame = 0xa04; // int32
		constexpr uint32_t m_flFrustumDistanceSqr = 0xa08; // float32
		constexpr uint32_t m_nLod = 0xa0c; // uint8
	}
	namespace C_BaseCombatCharacter {
		constexpr uint32_t m_hMyWearables = 0x958; // C_NetworkUtlVectorBase< CHandle< C_EconWearable > >
		constexpr uint32_t m_bloodColor = 0x970; // int32
		constexpr uint32_t m_leftFootAttachment = 0x974; // AttachmentHandle_t
		constexpr uint32_t m_rightFootAttachment = 0x975; // AttachmentHandle_t
		constexpr uint32_t m_nWaterWakeMode = 0x978; // C_BaseCombatCharacter::WaterWakeMode_t
		constexpr uint32_t m_flWaterWorldZ = 0x97c; // float32
		constexpr uint32_t m_flWaterNextTraceTime = 0x980; // float32
		constexpr uint32_t m_flFieldOfView = 0x984; // float32
	}
	namespace C_BaseFlex {
		constexpr uint32_t m_flexWeight = 0x7e0; // C_NetworkUtlVectorBase< float32 >
		constexpr uint32_t m_vLookTargetPosition = 0x7f8; // Vector
		constexpr uint32_t m_blinktoggle = 0x810; // bool
		constexpr uint32_t m_nLastFlexUpdateFrameCount = 0x870; // int32
		constexpr uint32_t m_CachedViewTarget = 0x874; // Vector
		constexpr uint32_t m_nNextSceneEventId = 0x880; // uint32
		constexpr uint32_t m_iBlink = 0x884; // int32
		constexpr uint32_t m_blinktime = 0x888; // float32
		constexpr uint32_t m_prevblinktoggle = 0x88c; // bool
		constexpr uint32_t m_iMouthAttachment = 0x88d; // AttachmentHandle_t
		constexpr uint32_t m_iEyeAttachment = 0x88e; // AttachmentHandle_t
		constexpr uint32_t m_bResetFlexWeightsOnModelChange = 0x88f; // bool
		constexpr uint32_t m_nEyeOcclusionRendererBone = 0x8a8; // int32
		constexpr uint32_t m_mEyeOcclusionRendererCameraToBoneTransform = 0x8ac; // matrix3x4_t
		constexpr uint32_t m_vEyeOcclusionRendererHalfExtent = 0x8dc; // Vector
		constexpr uint32_t m_PhonemeClasses = 0x8f8; // C_BaseFlex::Emphasized_Phoneme[3]
	}
	namespace CBaseAnimatingActivity {
		constexpr uint32_t m_bShouldAnimateDuringGameplayPause = 0x7a8; // bool
		constexpr uint32_t m_bInitiallyPopulateInterpHistory = 0x7a9; // bool
		constexpr uint32_t m_bAnimationUpdateScheduled = 0x7aa; // bool
		constexpr uint32_t m_pSuppressedAnimEventTags = 0x7b0; // CUtlVector< CUtlString >*
		constexpr uint32_t m_bHasAnimatedMaterialAttributes = 0x7b8; // bool
		constexpr uint32_t m_bSuppressAnimEventSounds = 0x7c8; // bool
	}
	namespace C_DOTA_UnitInventory {
		constexpr uint32_t m_SharedCooldownList = 0x8; // CUtlVector< sSharedCooldownInfo >
		constexpr uint32_t m_hItems = 0x20; // CHandle< C_BaseEntity >[19]
		constexpr uint32_t m_bItemQueried = 0x6c; // bool[21]
		constexpr uint32_t m_iParity = 0x84; // int32
		constexpr uint32_t m_hInventoryParent = 0x88; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bIsActive = 0x8c; // bool
		constexpr uint32_t m_bStashEnabled = 0x8d; // bool
		constexpr uint32_t m_hTransientCastItem = 0x90; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bSendChangedMsg = 0xb0; // bool
	}
	namespace C_BaseModelEntity {
		constexpr uint32_t m_CRenderComponent = 0x528; // CRenderComponent*
		constexpr uint32_t m_CHitboxComponent = 0x530; // CHitboxComponent
		constexpr uint32_t m_bInitModelEffects = 0x578; // bool
		constexpr uint32_t m_bIsStaticProp = 0x579; // bool
		constexpr uint32_t m_iViewerID = 0x57c; // int32
		constexpr uint32_t m_iTeamVisibilityBitmask = 0x580; // int32
		constexpr uint32_t m_nLastAddDecal = 0x584; // int32
		constexpr uint32_t m_nDecalsAdded = 0x588; // int32
		constexpr uint32_t m_iOldHealth = 0x58c; // int32
		constexpr uint32_t m_nRenderMode = 0x590; // RenderMode_t
		constexpr uint32_t m_bVisibilityDirtyFlag = 0x591; // bool
		constexpr uint32_t m_nRenderFX = 0x592; // RenderFx_t
		constexpr uint32_t m_bAllowFadeInView = 0x593; // bool
		constexpr uint32_t m_clrRender = 0x594; // Color
		constexpr uint32_t m_vecRenderAttributes = 0x598; // C_UtlVectorEmbeddedNetworkVar< EntityRenderAttribute_t >
		constexpr uint32_t m_bRenderToCubemaps = 0x600; // bool
		constexpr uint32_t m_Collision = 0x608; // CCollisionProperty
		constexpr uint32_t m_Glow = 0x6b8; // CGlowProperty
		constexpr uint32_t m_flGlowBackfaceMult = 0x710; // float32
		constexpr uint32_t m_fadeMinDist = 0x714; // float32
		constexpr uint32_t m_fadeMaxDist = 0x718; // float32
		constexpr uint32_t m_flFadeScale = 0x71c; // float32
		constexpr uint32_t m_flShadowStrength = 0x720; // float32
		constexpr uint32_t m_nObjectCulling = 0x724; // uint8
		constexpr uint32_t m_nAddDecal = 0x728; // int32
		constexpr uint32_t m_vDecalPosition = 0x72c; // Vector
		constexpr uint32_t m_vDecalForwardAxis = 0x738; // Vector
		constexpr uint32_t m_flDecalHealBloodRate = 0x744; // float32
		constexpr uint32_t m_flDecalHealHeightRate = 0x748; // float32
		constexpr uint32_t m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x750; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
		constexpr uint32_t m_vecViewOffset = 0x768; // CNetworkViewOffsetVector
		constexpr uint32_t m_pClientAlphaProperty = 0x798; // CClientAlphaProperty*
		constexpr uint32_t m_ClientOverrideTint = 0x7a0; // Color
		constexpr uint32_t m_bUseClientOverrideTint = 0x7a4; // bool
	}
	namespace C_DOTAPlayerController {
		constexpr uint32_t m_iMinimapMove = 0x758; // int32
		constexpr uint32_t m_pClickBehaviorKeys = 0x760; // KeyValues*
		constexpr uint32_t m_flCenterTime = 0x768; // GameTime_t
		constexpr uint32_t m_iConfirmationIndex = 0x76c; // int32
		constexpr uint32_t m_bCenterOnHero = 0x770; // bool
		constexpr uint32_t m_bHeroAssigned = 0x771; // bool
		constexpr uint32_t m_nKeyBindHeroID = 0x774; // int32
		constexpr uint32_t m_bUsingCameraMan = 0x778; // bool
		constexpr uint32_t m_bUsingAssistedCameraOperator = 0x779; // bool
		constexpr uint32_t m_nPlayerAssistFlags = 0x77c; // int32
		constexpr uint32_t m_vLatestEvent = 0x780; // Vector
		constexpr uint32_t m_hFreeDrawAbility = 0x7b0; // CHandle< C_DOTABaseAbility >
		constexpr uint32_t m_vLastFreeDrawPosition = 0x7b4; // Vector
		constexpr uint32_t m_nPlayerID = 0x7c0; // PlayerID_t
		constexpr uint32_t m_hAssignedHero = 0x7c4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hLastAssignedHero = 0x7c8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hKillCamUnit = 0x7cc; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hPreviousKillCamUnit = 0x7d0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_flKillCamUnitReceivedTime = 0x7d4; // float32
		constexpr uint32_t m_nRareLineClickCount = 0x7e0; // int32
		constexpr uint32_t m_nRareLinesPlayed = 0x7e4; // int32
		constexpr uint32_t m_nRareLineGroup = 0x7e8; // int32
		constexpr uint32_t m_flLastRareLinePlayTime = 0x7ec; // float32
		constexpr uint32_t m_flLastUnitOrdersSendTime = 0x7f0; // float32
		constexpr uint32_t m_bTeleportRequiresHalt = 0x7f4; // bool
		constexpr uint32_t m_bChannelRequiresHalt = 0x7f5; // bool
		constexpr uint32_t m_bAutoPurchaseItems = 0x7f6; // bool
		constexpr uint32_t m_bDisableHUDErrorMessages = 0x7f7; // bool
		constexpr uint32_t m_iMouseDragStartX = 0x7f8; // int32
		constexpr uint32_t m_iMouseDragStartY = 0x7fc; // int32
		constexpr uint32_t m_nWeatherType = 0x800; // int32
		constexpr uint32_t m_bDynamicWeatherSystemActive = 0x804; // bool
		constexpr uint32_t m_bDynamicSoundHandled = 0x805; // bool
		constexpr uint32_t m_flDynamicWeatherNextSwitchTime = 0x808; // GameTime_t
		constexpr uint32_t m_flDynamicWeatherScaleFinishedTime = 0x80c; // GameTime_t
		constexpr uint32_t m_flDynamicWeatherIntensity = 0x810; // float32
		constexpr uint32_t m_nXPRangeFXIndex = 0x814; // ParticleIndex_t
		constexpr uint32_t m_nVisionRangeFXIndex = 0x818; // ParticleIndex_t
		constexpr uint32_t m_nSelectedControlGroup = 0x81c; // int32
		constexpr uint32_t m_nCachedCoachedTeam = 0x820; // int32
		constexpr uint32_t m_hActiveAbility = 0x824; // CHandle< C_DOTABaseAbility >
		constexpr uint32_t m_unitorders = 0x828; // CUtlVector< CUnitOrders >
		constexpr uint32_t m_nOutgoingOrderSequenceNumber = 0x840; // int32
		constexpr uint32_t m_nServerOrderSequenceNumber = 0x844; // int32
		constexpr uint32_t m_nLastSentOutgoingOrderSequenceNumber = 0x848; // int32
		constexpr uint32_t m_nSelectedUnits = 0x850; // CUtlVector< CEntityIndex >
		constexpr uint32_t m_nWaypoints = 0x868; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_iActions = 0x880; // int32
		constexpr uint32_t m_hQueryUnit = 0x884; // CHandle< C_DOTA_BaseNPC >
		constexpr uint32_t m_bInQuery = 0x888; // bool
		constexpr uint32_t m_bSelectionChangedInDataUpdate = 0x889; // bool
		constexpr uint32_t m_flQueryInhibitingActionTime = 0x8f0; // GameTime_t
		constexpr uint32_t m_flQueryInhibitDuration = 0x8f4; // float32
		constexpr uint32_t m_RingedEntities = 0x8f8; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_ActiveRingOwners = 0x910; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_bOverridingQuery = 0x928; // bool
		constexpr uint32_t m_flLastAutoRepeatTime = 0x930; // float32
		constexpr uint32_t m_flConsumeDoubleclickTime = 0x934; // float32
		constexpr uint32_t m_LightInfoWeatherEffect = 0x938; // CUtlString
		constexpr uint32_t m_bPreviousWasLightInfoWeather = 0x940; // bool
		constexpr uint32_t m_MapDefaultWeatherEffect = 0x948; // CUtlString
		constexpr uint32_t m_bMapUsesDynamicWeather = 0x950; // bool
		constexpr uint32_t m_nCastRangeEffectCreationRadius = 0x978; // int32
		constexpr uint32_t m_vecSuggestedWardLocationEffects = 0x998; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_pSmartCastNPC = 0x9b0; // C_DOTA_BaseNPC*
		constexpr uint32_t m_nTeamSprayParticleIndex = 0x9b8; // ParticleIndex_t
		constexpr uint32_t m_bIsNextCastOrderFromMouseClick = 0x9bc; // bool
		constexpr uint32_t m_iCursor = 0x9f0; // int32[2]
		constexpr uint32_t m_iSpectatorClickBehavior = 0x9f8; // int32
		constexpr uint32_t m_flAspectRatio = 0x9fc; // float32
		constexpr uint32_t m_hSpectatorQueryUnit = 0xa00; // CHandle< C_BaseEntity >
		constexpr uint32_t m_iStatsPanel = 0xa04; // int32
		constexpr uint32_t m_iShopPanel = 0xa08; // int32
		constexpr uint32_t m_iShopViewMode = 0xa0c; // ShopItemViewMode_t
		constexpr uint32_t m_iStatsDropdownCategory = 0xa10; // int32
		constexpr uint32_t m_iStatsDropdownSort = 0xa14; // int32
		constexpr uint32_t m_szShopString = 0xa18; // char[64]
		constexpr uint32_t m_vecClientQuickBuyState = 0xa58; // C_UtlVectorEmbeddedNetworkVar< ClientQuickBuyItemState >
		constexpr uint32_t m_bInShowCaseMode = 0xaa8; // bool
		constexpr uint32_t m_flCameraZoomAmount = 0xaac; // float32
		constexpr uint32_t m_iHighPriorityScore = 0xab0; // int32
		constexpr uint32_t m_quickBuyItems = 0xab4; // AbilityID_t[9]
		constexpr uint32_t m_quickBuyIsPurchasable = 0xad8; // bool[9]
		constexpr uint32_t m_flFrameTime = 0xae4; // float32
		constexpr uint32_t m_flFrameTimeStdDev = 0xae8; // float32
		constexpr uint32_t m_flUnfilteredFrameTime = 0xaec; // float32
		constexpr uint32_t m_NeutralCampAlarms = 0xaf0; // CUtlVector< NeutralCampStackPullAlarm_t >
		constexpr uint32_t m_iPrevCursor = 0xb08; // int32[2]
		constexpr uint32_t m_iPositionHistoryTail = 0xbb0; // int32
		constexpr uint32_t m_iMusicStatus = 0xbb4; // int32
		constexpr uint32_t m_iPreviousMusicStatus = 0xbb8; // int32
		constexpr uint32_t m_bRequestedInventory = 0xbbc; // bool
		constexpr uint32_t m_flMusicOperatorVals = 0xbc0; // float32[3]
		constexpr uint32_t m_iMusicOperatorVals = 0xbcc; // int32[4]
		constexpr uint32_t m_ControlGroups = 0xbe0; // CUtlVector< sControlGroupElem >[10]
		constexpr uint32_t m_pkvControlGroupKV = 0xcd0; // KeyValues*
		constexpr uint32_t m_flAltHeldStartTime = 0xd30; // float32
	}
	namespace CSkeletonInstance {
		constexpr uint32_t m_bDirtyMotionType = 0x0; // bitfield:1
		constexpr uint32_t m_modelState = 0x170; // CModelState
		constexpr uint32_t m_bIsAnimationEnabled = 0x3a0; // bool
		constexpr uint32_t m_bUseParentRenderBounds = 0x3a1; // bool
		constexpr uint32_t m_bDisableSolidCollisionsForHierarchy = 0x3a2; // bool
		constexpr uint32_t m_materialGroup = 0x3a4; // CUtlStringToken
		constexpr uint32_t m_nHitboxSet = 0x3a8; // uint8
	}
	namespace CParticleFunction {
		constexpr uint32_t m_flOpStrength = 0x8; // CParticleCollectionFloatInput
		constexpr uint32_t m_nOpEndCapState = 0x160; // ParticleEndcapMode_t
		constexpr uint32_t m_flOpStartFadeInTime = 0x164; // float32
		constexpr uint32_t m_flOpEndFadeInTime = 0x168; // float32
		constexpr uint32_t m_flOpStartFadeOutTime = 0x16c; // float32
		constexpr uint32_t m_flOpEndFadeOutTime = 0x170; // float32
		constexpr uint32_t m_flOpFadeOscillatePeriod = 0x174; // float32
		constexpr uint32_t m_bNormalizeToStopTime = 0x178; // bool
		constexpr uint32_t m_flOpTimeOffsetMin = 0x17c; // float32
		constexpr uint32_t m_flOpTimeOffsetMax = 0x180; // float32
		constexpr uint32_t m_nOpTimeOffsetSeed = 0x184; // int32
		constexpr uint32_t m_nOpTimeScaleSeed = 0x188; // int32
		constexpr uint32_t m_flOpTimeScaleMin = 0x18c; // float32
		constexpr uint32_t m_flOpTimeScaleMax = 0x190; // float32
		constexpr uint32_t m_bDisableOperator = 0x196; // bool
		constexpr uint32_t m_Notes = 0x198; // CUtlString
	}
	namespace CGameSceneNode {
		constexpr uint32_t m_bDirtyHierarchy = 0x0; // bitfield:1
		constexpr uint32_t m_nodeToWorld = 0x10; // CTransform
		constexpr uint32_t m_pOwner = 0x30; // CEntityInstance*
		constexpr uint32_t m_pParent = 0x38; // CGameSceneNode*
		constexpr uint32_t m_pChild = 0x40; // CGameSceneNode*
		constexpr uint32_t m_pNextSibling = 0x48; // CGameSceneNode*
		constexpr uint32_t m_hParent = 0x78; // CGameSceneNodeHandle
		constexpr uint32_t m_vecOrigin = 0x88; // CNetworkOriginCellCoordQuantizedVector
		constexpr uint32_t m_angRotation = 0xc0; // QAngle
		constexpr uint32_t m_flScale = 0xcc; // float32
		constexpr uint32_t m_vecAbsOrigin = 0xd0; // Vector
		constexpr uint32_t m_angAbsRotation = 0xdc; // QAngle
		constexpr uint32_t m_flAbsScale = 0xe8; // float32
		constexpr uint32_t m_nParentAttachmentOrBone = 0xec; // int16
		constexpr uint32_t m_bDebugAbsOriginChanges = 0xee; // bool
		constexpr uint32_t m_bDormant = 0xef; // bool
		constexpr uint32_t m_bForceParentToBeNetworked = 0xf0; // bool
		constexpr uint32_t m_nHierarchicalDepth = 0xf3; // uint8
		constexpr uint32_t m_nHierarchyType = 0xf4; // uint8
		constexpr uint32_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xf5; // uint8
		constexpr uint32_t m_name = 0xf8; // CUtlStringToken
		constexpr uint32_t m_hierarchyAttachName = 0x138; // CUtlStringToken
		constexpr uint32_t m_flZOffset = 0x13c; // float32
		constexpr uint32_t m_flClientLocalScale = 0x140; // float32
		constexpr uint32_t m_vRenderOrigin = 0x144; // Vector
	}
	namespace CModelState {
		constexpr uint32_t m_hModel = 0xa0; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_ModelName = 0xa8; // CUtlSymbolLarge
		constexpr uint32_t m_bClientClothCreationSuppressed = 0xe8; // bool
		constexpr uint32_t m_MeshGroupMask = 0x198; // uint64
		constexpr uint32_t m_nIdealMotionType = 0x21a; // int8
		constexpr uint32_t m_nForceLOD = 0x21b; // int8
		constexpr uint32_t m_nClothUpdateFlags = 0x21c; // int8
	}
	namespace C_DOTA_PlayerResource {
		constexpr uint32_t m_bWasDataUpdateCreated = 0x538; // bool
		constexpr uint32_t m_vecPlayerTeamData = 0x540; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerTeamData_t >
		constexpr uint32_t m_vecPlayerData = 0x590; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerData_t >
		constexpr uint32_t m_vecBrodcasterData = 0x5e0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourceBroadcasterData_t >
		constexpr uint32_t m_vecEventsForDisplay = 0x630; // C_NetworkUtlVectorBase< uint32 >
		constexpr uint32_t m_nPrimaryEventIndex = 0x648; // int8
		constexpr uint32_t m_nObsoleteEventIDAssociatedWithEventData = 0x64c; // uint32
		constexpr uint32_t m_playerIDToPlayer = 0x650; // CHandle< C_BaseEntity >[64]
		constexpr uint32_t m_iszName = 0x750; // CUtlSymbolLarge[64]
		constexpr uint32_t m_iszHTMLSafeName = 0x950; // CUtlSymbolLarge[64]
		constexpr uint32_t m_iszFilteredHTMLSafeName = 0xb50; // CUtlSymbolLarge[64]
		constexpr uint32_t m_bDirtySuggestedItems = 0x2550; // bool
		constexpr uint32_t m_bDirtyEstimatedMatchDuration = 0x2551; // bool
		constexpr uint32_t m_bDirtySelection = 0x2552; // bool
		constexpr uint32_t m_bHasWorldTreesChanged = 0x2553; // bool
		constexpr uint32_t m_bWorldTreeModelsChanged = 0x2554; // bool
		constexpr uint32_t m_bSwapWillingness = 0x2555; // bool[24]
		constexpr uint32_t m_hTeamCouriers = 0x25b0; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[15]
		constexpr uint32_t m_hPlayerCouriers = 0x2718; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[64]
		constexpr uint32_t m_vecOnstageHomeTeams = 0x2d18; // CUtlVector< uint32 >
		constexpr uint32_t m_pPlayerIDToOnstageSlot = 0x2d30; // PlayerSeatAssignment_t*[24]
		constexpr uint32_t m_vecOnstagePlayerSeats = 0x2df0; // CUtlVector< PlayerSeatAssignment_t >
		constexpr uint32_t m_nEventNPCReplaced = 0x2e08; // int32
		constexpr uint32_t m_nEventPlayerInfo = 0x2e0c; // int32
		constexpr uint32_t m_nInventoryUpdated = 0x2e10; // int32
	}
	namespace PlayerResourcePlayerTeamData_t {
		constexpr uint32_t m_ThreatLevelInfos = 0x30; // C_UtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
		constexpr uint32_t m_nSelectedHeroID = 0x80; // int32
		constexpr uint32_t m_iKills = 0x84; // int32
		constexpr uint32_t m_iAssists = 0x88; // int32
		constexpr uint32_t m_iDeaths = 0x8c; // int32
		constexpr uint32_t m_iStreak = 0x90; // int32
		constexpr uint32_t m_iLevel = 0x94; // int32
		constexpr uint32_t m_iCustomIntParam = 0x98; // int32
		constexpr uint32_t m_iRespawnSeconds = 0x9c; // int32
		constexpr uint32_t m_flLastBuybackTime = 0xa0; // GameTime_t
		constexpr uint32_t m_iLastBuybackTime_Obsolete = 0xa4; // int32
		constexpr uint32_t m_hSelectedHero = 0xa8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bAFK = 0xac; // bool
		constexpr uint32_t m_nSuggestedHeroes = 0xb0; // int32[4]
		constexpr uint32_t m_bBanSuggestedHeroes = 0xc0; // bool[4]
		constexpr uint32_t m_iTimedRewardDrops = 0xc4; // item_definition_index_t
		constexpr uint32_t m_iTimedRewardDropOrigins = 0xc8; // int32
		constexpr uint32_t m_iTimedRewardCrates = 0xcc; // item_definition_index_t
		constexpr uint32_t m_iTimedRewardEvents = 0xd0; // item_definition_index_t
		constexpr uint32_t m_unCompendiumLevel = 0xd4; // uint16
		constexpr uint32_t m_bCanRepick = 0xd6; // bool
		constexpr uint32_t m_bCanEarnRewards = 0xd7; // bool
		constexpr uint32_t m_bHasRandomed = 0xd8; // bool
		constexpr uint32_t m_nRandomedHeroID = 0xdc; // int32
		constexpr uint32_t m_bBattleBonusActive = 0xe0; // bool
		constexpr uint32_t m_iBattleBonusRate = 0xe2; // uint16
		constexpr uint32_t m_iCustomBuybackCost = 0xe4; // int32
		constexpr uint32_t m_CustomPlayerColor = 0xe8; // Color
		constexpr uint32_t m_bQualifiesForPAContractReward = 0xec; // bool
		constexpr uint32_t m_bHasPredictedVictory = 0xed; // bool
		constexpr uint32_t m_UnitShareMasks = 0xf0; // int32
		constexpr uint32_t m_iTeamSlot = 0xf4; // int32
		constexpr uint32_t m_iBattleCupWinStreak = 0xf8; // uint8
		constexpr uint32_t m_iBattleCupWinDate = 0x100; // uint64
		constexpr uint32_t m_iBattleCupSkillLevel = 0x108; // uint16
		constexpr uint32_t m_iBattleCupTeamID = 0x10c; // uint32
		constexpr uint32_t m_iBattleCupTournamentID = 0x110; // uint32
		constexpr uint32_t m_iBattleCupDivision = 0x114; // uint8
		constexpr uint32_t m_flTeamFightParticipation = 0x118; // float32
		constexpr uint32_t m_iFirstBloodClaimed = 0x11c; // int32
		constexpr uint32_t m_iFirstBloodGiven = 0x120; // int32
		constexpr uint32_t m_unPickOrder = 0x124; // uint32
		constexpr uint32_t m_flTimeOfLastSaluteSent = 0x128; // GameTime_t
		constexpr uint32_t m_vecPlayerEventData = 0x130; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerEventData_t >
		constexpr uint32_t m_unSelectedHeroBadgeXP = 0x180; // uint32
		constexpr uint32_t m_iBountyRunes = 0x184; // uint8
		constexpr uint32_t m_iPowerRunes = 0x185; // uint8
		constexpr uint32_t m_iWaterRunes = 0x186; // uint8
		constexpr uint32_t m_iOutpostsCaptured = 0x187; // uint8
		constexpr uint32_t m_unGuildTier = 0x188; // uint8
		constexpr uint32_t m_unGuildLevel = 0x18a; // uint16
		constexpr uint32_t m_unGuildPrimaryColor = 0x18c; // uint8
		constexpr uint32_t m_unGuildSecondaryColor = 0x18d; // uint8
		constexpr uint32_t m_unGuildPattern = 0x18e; // uint8
		constexpr uint32_t m_unGuildLogo = 0x190; // uint64
		constexpr uint32_t m_unGuildFlags = 0x198; // uint32
		constexpr uint32_t m_bIsPartyGuild = 0x19c; // bool
		constexpr uint32_t m_unGuildID = 0x1a0; // GuildID_t
		constexpr uint32_t m_unHeroStickerDefIndex = 0x1a4; // item_definition_index_t
		constexpr uint32_t m_eHeroStickerQuality = 0x1a8; // uint8
		constexpr uint32_t m_eLaneSelectionFlags = 0x1a9; // uint8
		constexpr uint32_t m_nPlayerDraftPreferredRoles = 0x1aa; // uint8
		constexpr uint32_t m_nPlayerDraftPreferredTeam = 0x1ab; // int8
		constexpr uint32_t m_nAvailableGifts = 0x1ac; // uint8
		constexpr uint32_t m_iObsoleteEventPoints = 0x1b0; // uint32
		constexpr uint32_t m_iObsoleteEventPremiumPoints = 0x1b4; // uint32
		constexpr uint32_t m_iObsoleteEventWagerTokensRemaining = 0x1b8; // uint32
		constexpr uint32_t m_iObsoleteEventWagerTokensMax = 0x1bc; // uint32
		constexpr uint32_t m_iObsoleteEventEffectsMask = 0x1c0; // uint32
		constexpr uint32_t m_iObsoleteEventRanks = 0x1c4; // uint16
		constexpr uint32_t m_bObsoleteIsEventOwned = 0x1c6; // bool
		constexpr uint32_t m_iObsoleteRankWagersAvailable = 0x1c8; // uint32
		constexpr uint32_t m_iObsoleteRankWagersMax = 0x1cc; // uint32
		constexpr uint32_t m_iObsoleteEventPointAdjustmentsRemaining = 0x1d0; // uint32
		constexpr uint32_t m_iObsoleteAvailableSalutes = 0x1d4; // uint32
		constexpr uint32_t m_iObsoleteSaluteAmounts = 0x1d8; // uint32
	}
	namespace C_DOTAGamerules {
		constexpr uint32_t m_nRuneCycle = 0x40; // int32
		constexpr uint32_t m_iMiscHeroPickCounter = 0x44; // int32
		constexpr uint32_t m_hEndGameCinematicEntity = 0x48; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hOverlayHealthBarUnit = 0x4c; // CHandle< C_DOTA_BaseNPC >
		constexpr uint32_t m_nOverlayHealthBarType = 0x50; // int32
		constexpr uint32_t m_bIsInCinematicMode = 0x54; // bool
		constexpr uint32_t m_bIsInClientSideCinematicMode = 0x55; // bool
		constexpr uint32_t m_bFreeCourierMode = 0x56; // bool
		constexpr uint32_t m_nStartingGold = 0x58; // int32
		constexpr uint32_t m_nGoldPerTick = 0x5c; // int32
		constexpr uint32_t m_flGoldTickTime = 0x60; // float32
		constexpr uint32_t m_bItemWhiteListChanged = 0x64; // bool
		constexpr uint32_t m_bEnableSuggestAbilities = 0x65; // bool
		constexpr uint32_t m_bEnableSuggestItems = 0x66; // bool
		constexpr uint32_t m_unFanfareGoodGuys = 0x68; // uint32
		constexpr uint32_t m_unFanfareBadGuys = 0x6c; // uint32
		constexpr uint32_t m_iMapType = 0x70; // int32
		constexpr uint32_t m_nServerGameState = 0x74; // int32
		constexpr uint32_t m_nServerHeroPickState = 0x78; // DOTA_HeroPickState
		constexpr uint32_t m_nGameState = 0x7c; // int32
		constexpr uint32_t m_nHeroPickState = 0x80; // DOTA_HeroPickState
		constexpr uint32_t m_bAlternateHeroGridsEnabled = 0x84; // bool
		constexpr uint32_t m_flStateTransitionTime = 0x88; // GameTime_t
		constexpr uint32_t m_flOverride_dota_hero_selection_time = 0x8c; // float32
		constexpr uint32_t m_flOverride_dota_pregame_time = 0x90; // float32
		constexpr uint32_t m_flOverride_dota_postgame_time = 0x94; // float32
		constexpr uint32_t m_flOverride_dota_strategy_time = 0x98; // float32
		constexpr uint32_t m_flOverride_dota_team_showcase_duration = 0x9c; // float32
		constexpr uint32_t m_flOverride_dota_rune_spawn_time = 0xa0; // float32
		constexpr uint32_t m_flShowcaseTime = 0xa4; // float32[15]
		constexpr uint32_t m_flNeutralInitialSpawnOffset = 0xe0; // float32
		constexpr uint32_t m_iGameMode = 0xe4; // int32
		constexpr uint32_t m_hGameModeEntity = 0xe8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hCustomHeroPickRulesEntity = 0xec; // CHandle< C_BaseEntity >
		constexpr uint32_t m_flHeroPickStateTransitionTime = 0xf0; // GameTime_t
		constexpr uint32_t m_iPlayerIDsInControl = 0xf8; // uint64
		constexpr uint32_t m_bSameHeroSelectionEnabled = 0x100; // bool
		constexpr uint32_t m_bUseCustomHeroXPValue = 0x101; // bool
		constexpr uint32_t m_bUseBaseGoldBountyOnHeroes = 0x102; // bool
		constexpr uint32_t m_bUseUniversalShopMode = 0x103; // bool
		constexpr uint32_t m_bHideKillMessageHeaders = 0x104; // bool
		constexpr uint32_t m_flHeroMinimapIconScale = 0x108; // float32
		constexpr uint32_t m_flCreepMinimapIconScale = 0x10c; // float32
		constexpr uint32_t m_bCreepSpawningEnabled = 0x110; // bool
		constexpr uint32_t m_flRuneMinimapIconScale = 0x114; // float32
		constexpr uint32_t m_CustomVictoryMessage = 0x118; // char[256]
		constexpr uint32_t m_flCustomGameEndDelay = 0x218; // float32
		constexpr uint32_t m_flCustomGameSetupAutoLaunchDelay = 0x21c; // float32
		constexpr uint32_t m_flCustomGameSetupTimeout = 0x220; // float32
		constexpr uint32_t m_flCustomVictoryMessageDuration = 0x224; // float32
		constexpr uint32_t m_flHeroSelectPenaltyTime = 0x228; // float32
		constexpr uint32_t m_bCustomGameSetupAutoLaunchEnabled = 0x22c; // bool
		constexpr uint32_t m_bCustomGameTeamSelectionLocked = 0x22d; // bool
		constexpr uint32_t m_bCustomGameEnablePickRules = 0x22e; // bool
		constexpr uint32_t m_bCustomGameAllowHeroPickMusic = 0x22f; // bool
		constexpr uint32_t m_bCustomGameAllowMusicAtGameStart = 0x230; // bool
		constexpr uint32_t m_bCustomGameAllowBattleMusic = 0x231; // bool
		constexpr uint32_t m_bCustomGameDisableIK = 0x232; // bool
		constexpr uint32_t m_bCustomGameAllowSecondaryAbilitiesOnOtherUnits = 0x233; // bool
		constexpr uint32_t m_iCMModePickBanOrder = 0x234; // int32
		constexpr uint32_t m_iCDModePickBanOrder = 0x238; // int32
		constexpr uint32_t m_nGGTeam = 0x23c; // int32
		constexpr uint32_t m_flGGEndsAtTime = 0x240; // GameTime_t
		constexpr uint32_t m_bGGCalled = 0x244; // bool
		constexpr uint32_t m_bWhiteListEnabled = 0x245; // bool
		constexpr uint32_t m_bItemWhiteList = 0x248; // uint64[4]
		constexpr uint32_t m_nLastHitUIMode = 0x268; // int32
		constexpr uint32_t m_bHUDTimerTutorialMode = 0x26c; // bool
		constexpr uint32_t m_HeroPickMiscTimer = 0x270; // CountdownTimer
		constexpr uint32_t m_ExtraTimeTimer = 0x288; // CountdownTimer
		constexpr uint32_t m_fExtraTimeRemaining = 0x2a0; // float32[2]
		constexpr uint32_t m_bHeroRespawnEnabled = 0x2a8; // bool
		constexpr uint32_t m_bIsRandomingEnabled = 0x2a9; // bool
		constexpr uint32_t m_iCaptainPlayerIDs = 0x2ac; // PlayerID_t[2]
		constexpr uint32_t m_BannedHeroes = 0x2b4; // int32[24]
		constexpr uint32_t m_SelectedHeroes = 0x314; // int32[24]
		constexpr uint32_t m_iActiveTeam = 0x374; // int32
		constexpr uint32_t m_iStartingTeam = 0x378; // int32
		constexpr uint32_t m_iPenaltyLevelRadiant = 0x37c; // int32
		constexpr uint32_t m_iPenaltyLevelDire = 0x380; // int32
		constexpr uint32_t m_bIsLoadingScenario = 0x384; // bool
		constexpr uint32_t m_vecNewBannedHeroes = 0x388; // C_NetworkUtlVectorBase< int32 >
		constexpr uint32_t m_vecWhitelistedHeroes = 0x3a0; // C_NetworkUtlVectorBase< int32 >
		constexpr uint32_t m_vecBlacklistedHeroes = 0x3b8; // C_NetworkUtlVectorBase< int32 >
		constexpr uint32_t m_bHideBlacklistedHeroes = 0x3d0; // bool
		constexpr uint32_t m_nSeriesType = 0x3d4; // int32
		constexpr uint32_t m_nRadiantSeriesWins = 0x3d8; // int32
		constexpr uint32_t m_nDireSeriesWins = 0x3dc; // int32
		constexpr uint32_t m_vecAvailableHerosPerPlayerID = 0x3e0; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_vecLockedHerosByPlayerID = 0x430; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_vecDisabledRandomHerosByPlayerID = 0x480; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_CustomGameForceSelectHero = 0x4d0; // int32[24]
		constexpr uint32_t m_flGoldTime = 0x530; // float32
		constexpr uint32_t m_flXPTime = 0x534; // float32
		constexpr uint32_t m_flCreepSpawntime = 0x538; // GameTime_t
		constexpr uint32_t m_flAnnounceStartTime = 0x53c; // float32
		constexpr uint32_t m_iGoodTomeCount = 0x540; // int32
		constexpr uint32_t m_iBadTomeCount = 0x544; // int32
		constexpr uint32_t m_flPreGameStartTime = 0x548; // GameTime_t
		constexpr uint32_t m_flGameStartTime = 0x54c; // GameTime_t
		constexpr uint32_t m_flGameEndTime = 0x550; // GameTime_t
		constexpr uint32_t m_flGameLoadTime = 0x554; // float32
		constexpr uint32_t m_iCustomGameScore = 0x558; // int32[2]
		constexpr uint32_t m_nCustomGameDifficulty = 0x560; // int32
		constexpr uint32_t m_bEnemyModifiersEnabled = 0x564; // bool
		constexpr uint32_t m_iWaves = 0x568; // int32
		constexpr uint32_t m_iCreepUpgradeState = 0x56c; // int32
		constexpr uint32_t m_fGoodGlyphCooldown = 0x570; // GameTime_t
		constexpr uint32_t m_fBadGlyphCooldown = 0x574; // GameTime_t
		constexpr uint32_t m_flGlyphCooldowns = 0x578; // GameTime_t[15]
		constexpr uint32_t m_fGoodRadarCooldown = 0x5b4; // GameTime_t
		constexpr uint32_t m_fBadRadarCooldown = 0x5b8; // GameTime_t
		constexpr uint32_t m_flRadarCooldowns = 0x5bc; // GameTime_t[15]
		constexpr uint32_t m_iGoodRadarCharges = 0x5f8; // int32
		constexpr uint32_t m_iBadRadarCharges = 0x5fc; // int32
		constexpr uint32_t m_iRadarCharges = 0x600; // int32[15]
		constexpr uint32_t m_flOutpostTimes = 0x63c; // float32[24]
		constexpr uint32_t m_bIsNightstalkerNight = 0x69c; // bool
		constexpr uint32_t m_bIsTemporaryNight = 0x69d; // bool
		constexpr uint32_t m_bIsTemporaryDay = 0x69e; // bool
		constexpr uint32_t m_nRiverType = 0x6a0; // int32
		constexpr uint32_t m_nTeamFeaturedPlayerID = 0x6a4; // PlayerID_t[15]
		constexpr uint32_t m_nTeamVersusScreen = 0x6e0; // item_definition_index_t[15]
		constexpr uint32_t m_flGoldRedistributeTime = 0x71c; // float32
		constexpr uint32_t m_nGoldToRedistribute = 0x720; // int32[2]
		constexpr uint32_t m_flNextPreGameThink = 0x728; // GameTime_t
		constexpr uint32_t m_flNextAllDraftGoldThink = 0x72c; // GameTime_t
		constexpr uint32_t m_flTimeEnteredState = 0x730; // float64
		constexpr uint32_t m_unRiverAccountID = 0x738; // uint32
		constexpr uint32_t m_ulRiverItemID = 0x740; // itemid_t
		constexpr uint32_t m_vecItemStockInfo = 0x788; // C_UtlVectorEmbeddedNetworkVar< CDOTA_ItemStockInfo >
		constexpr uint32_t m_AssassinMiniGameNetData = 0x7d8; // DOTA_AssassinMinigameNetworkState
		constexpr uint32_t m_nGameWinner = 0x7e8; // int32
		constexpr uint32_t m_unMatchID64 = 0x7f0; // MatchID_t
		constexpr uint32_t m_bMatchSignoutComplete = 0x7f8; // bool
		constexpr uint32_t m_hSideShop1 = 0x7fc; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSideShop2 = 0x800; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSecretShop1 = 0x804; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSecretShop2 = 0x808; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hTeamFountains = 0x80c; // CHandle< C_BaseEntity >[15]
		constexpr uint32_t m_hTeamForts = 0x848; // CHandle< C_BaseEntity >[15]
		constexpr uint32_t m_hTeamShops = 0x884; // CHandle< C_BaseEntity >[15]
		constexpr uint32_t m_hAnnouncerGood = 0x8c0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerBad = 0x8c4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerSpectator = 0x8c8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerGood_KillingSpree = 0x8cc; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerBad_KillingSpree = 0x8d0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerSpectator_KillingSpree = 0x8d4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_arrTier1TowerDestroyed = 0x8d8; // bool[15]
		constexpr uint32_t m_arrTier2TowerDestroyed = 0x8e7; // bool[15]
		constexpr uint32_t m_arrTier3TowerDestroyed = 0x8f6; // bool[15]
		constexpr uint32_t m_bTier1TowerDestroyed = 0x905; // bool
		constexpr uint32_t m_bTier2TowerDestroyed = 0x906; // bool
		constexpr uint32_t m_bTier3TowerDestroyed = 0x907; // bool
		constexpr uint32_t m_fTimeOfDay = 0x908; // float32
		constexpr uint32_t m_iNetTimeOfDay = 0x90c; // int32
		constexpr uint32_t m_nLoadedPlayers = 0x910; // int32
		constexpr uint32_t m_nExpectedPlayers = 0x914; // int32
		constexpr uint32_t m_iMinimapDebugGridState = 0x920; // int32
		constexpr uint32_t m_iFoWFrameNumber = 0x9a0; // int32
		constexpr uint32_t m_vWeatherWindDirection = 0x9a4; // Vector
		constexpr uint32_t m_vecRequiredPlaytestHeroesStorage = 0x9b0; // int32[24]
		constexpr uint32_t m_vecRecommendedPlaytestHeroesStorage = 0xa10; // int32[24]
		constexpr uint32_t m_bAllRequiredPlaytestHeroesPicked = 0xa70; // bool
		constexpr uint32_t m_nLastPlaytestPickPhase = 0xa74; // int32
		constexpr uint32_t m_nCustomGameFowTeamCount = 0xa78; // int32
		constexpr uint32_t m_bUseAlternateABRules = 0xa7c; // bool
		constexpr uint32_t m_bLobbyIsAssociatedWithGame = 0xa7d; // bool
		constexpr uint32_t m_BotDebugTimer = 0xa80; // CountdownTimer
		constexpr uint32_t m_BotDebugPushLane = 0xa98; // uint8[18]
		constexpr uint32_t m_BotDebugDefendLane = 0xaaa; // uint8[18]
		constexpr uint32_t m_BotDebugFarmLane = 0xabc; // uint8[6]
		constexpr uint32_t m_BotDebugRoam = 0xac2; // uint8[8]
		constexpr uint32_t m_hBotDebugRoamTarget = 0xacc; // CHandle< C_BaseEntity >[2]
		constexpr uint32_t m_BotDebugRoshan = 0xad4; // uint8[2]
		constexpr uint32_t m_nRoshanRespawnPhase = 0xad8; // ERoshanSpawnPhase
		constexpr uint32_t m_flRoshanRespawnPhaseEndTime = 0xadc; // GameTime_t
		constexpr uint32_t m_AbilityDraftAbilities = 0xae0; // C_UtlVectorEmbeddedNetworkVar< CDOTA_AbilityDraftAbilityState >
		constexpr uint32_t m_bAbilityDraftCurrentPlayerHasPicked = 0xb30; // bool
		constexpr uint32_t m_nAbilityDraftPlayerTracker = 0xb34; // int32
		constexpr uint32_t m_nAbilityDraftRoundNumber = 0xb38; // int32
		constexpr uint32_t m_nAbilityDraftAdvanceSteps = 0xb3c; // int32
		constexpr uint32_t m_nAbilityDraftPhase = 0xb40; // int32
		constexpr uint32_t m_nAbilityDraftHeroesChosen = 0xb44; // int32[13]
		constexpr uint32_t m_bIsPlayerDraft = 0xb78; // bool
		constexpr uint32_t m_ePlayerDraftState = 0xb7c; // DOTA_PlayerDraftState
		constexpr uint32_t m_vecPlayerDraftPickOrder = 0xb80; // C_NetworkUtlVectorBase< uint8 >
		constexpr uint32_t m_nPlayerDraftPick = 0xb98; // int32
		constexpr uint32_t m_nPlayerDraftActiveTeam = 0xb9c; // int32
		constexpr uint32_t m_flPlayerDraftTimeBank = 0xba0; // float32[2]
		constexpr uint32_t m_vecARDMHeroes = 0xba8; // CUtlVector< KeyValues* >[2]
		constexpr uint32_t m_nARDMHeroesPrecached = 0xbd8; // int32
		constexpr uint32_t m_fLastARDMPrecache = 0xbdc; // float32
		constexpr uint32_t m_nAllDraftPhase = 0xbe0; // int32
		constexpr uint32_t m_bAllDraftRadiantFirst = 0xbe4; // bool
		constexpr uint32_t m_bAllowOverrideVPK = 0xbe5; // bool
		constexpr uint32_t m_nARDMHeroesRemaining = 0xbe8; // int32[2]
		constexpr uint32_t m_bUpdateHeroStatues = 0xbf0; // bool
		constexpr uint32_t m_bExperimentalGameplay = 0xc08; // bool
		constexpr uint32_t m_vecPlayerMMR = 0xc50; // CUtlVector< int32 >
		constexpr uint32_t m_lobbyType = 0xc68; // uint32
		constexpr uint32_t m_lobbyLeagueID = 0xc6c; // LeagueID_t
		constexpr uint32_t m_lobbyGameName = 0xc70; // char[256]
		constexpr uint32_t m_vecHeroStatueLiked = 0xd70; // C_UtlVectorEmbeddedNetworkVar< CHeroStatueLiked >
		constexpr uint32_t m_CustomGameTeamMaxPlayers = 0xdc0; // int32[15]
		constexpr uint32_t m_iMutations = 0xdfc; // int32[5]
		constexpr uint32_t m_vecIngameEvents = 0xe10; // C_NetworkUtlVectorBase< CHandle< C_IngameEvent_Base > >
		constexpr uint32_t m_nPrimaryIngameEventIndex = 0xe28; // int8
		constexpr uint32_t m_hObsoleteIngameEvent = 0xe2c; // CHandle< C_IngameEvent_Base >
		constexpr uint32_t m_nOfrendaPledges = 0xe30; // uint32
		constexpr uint32_t m_nRadiantOfrendas = 0xe34; // uint32
		constexpr uint32_t m_nDireOfrendas = 0xe38; // uint32
		constexpr uint32_t m_bOfrendaEnabled = 0xe3c; // bool
		constexpr uint32_t m_NeutralSpawnBoxes = 0xe70; // C_NetworkUtlVectorBase< NeutralSpawnBoxes_t >
		constexpr uint32_t m_RegionTriggerBoxes = 0xe88; // C_NetworkUtlVectorBase< RegionTriggerBoxes_t >
		constexpr uint32_t m_flLastPerfSampleTime = 0x1e58; // float64
		constexpr uint32_t m_flLastPerfSampleSendTime = 0x1e60; // float64
		constexpr uint32_t m_bDidSeeStrategyTime = 0x1e68; // bool
		constexpr uint32_t m_flLastUnfocusedSleepTime = 0xabc0; // float64
	}
	namespace C_GameRules {
		constexpr uint32_t __m_pChainEntity = 0x8; // CNetworkVarChainer
		constexpr uint32_t m_nTotalPausedTicks = 0x30; // int32
		constexpr uint32_t m_nPauseStartTick = 0x34; // int32
		constexpr uint32_t m_bGamePaused = 0x38; // bool
	}
	namespace C_DOTA_Item_Rune {
		constexpr uint32_t m_iRuneType = 0x7d0; // int32
		constexpr uint32_t m_flRuneTime = 0x7d4; // float32
		constexpr uint32_t m_nMapLocationTeam = 0x7d8; // int32
		constexpr uint32_t m_szLocation = 0x7dc; // char[512]
		constexpr uint32_t m_iOldRuneType = 0x9dc; // int32
		constexpr uint32_t m_bShowingTooltip = 0x9e0; // bool
	}
	namespace GameTime_t {
		constexpr uint32_t m_Value = 0x0; // float32
	}
	namespace C_DOTA_Item_EmptyBottle {
		constexpr uint32_t m_iStoredRuneType = 0x640; // int32
		constexpr uint32_t m_fStoredRuneTime = 0x644; // GameTime_t
		constexpr uint32_t rune_expire_time = 0x648; // float32
	}
	namespace C_DOTAGamerulesProxy {
		constexpr uint32_t m_pGameRules = 0x528; // C_DOTAGamerules*
	}
	namespace CBaseRendererSource2 {
		constexpr uint32_t m_flRadiusScale = 0x210; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flAlphaScale = 0x368; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flRollScale = 0x4c0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nAlpha2Field = 0x618; // ParticleAttributeIndex_t
		constexpr uint32_t m_vecColorScale = 0x620; // CParticleCollectionRendererVecInput
		constexpr uint32_t m_nColorBlendType = 0xc78; // ParticleColorBlendType_t
		constexpr uint32_t m_nShaderType = 0xc7c; // SpriteCardShaderType_t
		constexpr uint32_t m_strShaderOverride = 0xc80; // CUtlString
		constexpr uint32_t m_flCenterXOffset = 0xc88; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flCenterYOffset = 0xde0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flBumpStrength = 0xf38; // float32
		constexpr uint32_t m_nCropTextureOverride = 0xf3c; // ParticleSequenceCropOverride_t
		constexpr uint32_t m_vecTexturesInput = 0xf40; // CUtlVector< TextureGroup_t >
		constexpr uint32_t m_flAnimationRate = 0xf58; // float32
		constexpr uint32_t m_nAnimationType = 0xf5c; // AnimationType_t
		constexpr uint32_t m_bAnimateInFPS = 0xf60; // bool
		constexpr uint32_t m_flSelfIllumAmount = 0xf68; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDiffuseAmount = 0x10c0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDiffuseClamp = 0x1218; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nLightingControlPoint = 0x1370; // int32
		constexpr uint32_t m_nSelfIllumPerParticle = 0x1374; // ParticleAttributeIndex_t
		constexpr uint32_t m_nOutputBlendMode = 0x1378; // ParticleOutputBlendMode_t
		constexpr uint32_t m_bGammaCorrectVertexColors = 0x137c; // bool
		constexpr uint32_t m_bSaturateColorPreAlphaBlend = 0x137d; // bool
		constexpr uint32_t m_flAddSelfAmount = 0x1380; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDesaturation = 0x14d8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flOverbrightFactor = 0x1630; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nHSVShiftControlPoint = 0x1788; // int32
		constexpr uint32_t m_nFogType = 0x178c; // ParticleFogType_t
		constexpr uint32_t m_flFogAmount = 0x1790; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_bTintByFOW = 0x18e8; // bool
		constexpr uint32_t m_bTintByGlobalLight = 0x18e9; // bool
		constexpr uint32_t m_nPerParticleAlphaReference = 0x18ec; // SpriteCardPerParticleScale_t
		constexpr uint32_t m_nPerParticleAlphaRefWindow = 0x18f0; // SpriteCardPerParticleScale_t
		constexpr uint32_t m_nAlphaReferenceType = 0x18f4; // ParticleAlphaReferenceType_t
		constexpr uint32_t m_flAlphaReferenceSoftness = 0x18f8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flSourceAlphaValueToMapToZero = 0x1a50; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flSourceAlphaValueToMapToOne = 0x1ba8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_bRefract = 0x1d00; // bool
		constexpr uint32_t m_bRefractSolid = 0x1d01; // bool
		constexpr uint32_t m_flRefractAmount = 0x1d08; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nRefractBlurRadius = 0x1e60; // int32
		constexpr uint32_t m_nRefractBlurType = 0x1e64; // BlurFilterType_t
		constexpr uint32_t m_bOnlyRenderInEffectsBloomPass = 0x1e68; // bool
		constexpr uint32_t m_bOnlyRenderInEffectsWaterPass = 0x1e69; // bool
		constexpr uint32_t m_bUseMixedResolutionRendering = 0x1e6a; // bool
		constexpr uint32_t m_bOnlyRenderInEffecsGameOverlay = 0x1e6b; // bool
		constexpr uint32_t m_stencilTestID = 0x1e6c; // char[128]
		constexpr uint32_t m_bStencilTestExclude = 0x1eec; // bool
		constexpr uint32_t m_stencilWriteID = 0x1eed; // char[128]
		constexpr uint32_t m_bWriteStencilOnDepthPass = 0x1f6d; // bool
		constexpr uint32_t m_bWriteStencilOnDepthFail = 0x1f6e; // bool
		constexpr uint32_t m_bReverseZBuffering = 0x1f6f; // bool
		constexpr uint32_t m_bDisableZBuffering = 0x1f70; // bool
		constexpr uint32_t m_nFeatheringMode = 0x1f74; // ParticleDepthFeatheringMode_t
		constexpr uint32_t m_flFeatheringMinDist = 0x1f78; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flFeatheringMaxDist = 0x20d0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flFeatheringFilter = 0x2228; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flDepthBias = 0x2380; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nSortMethod = 0x24d8; // ParticleSortingChoiceList_t
		constexpr uint32_t m_bBlendFramesSeq0 = 0x24dc; // bool
		constexpr uint32_t m_bMaxLuminanceBlendingSequence0 = 0x24dd; // bool
	}
	namespace C_OP_RenderSprites {
		constexpr uint32_t m_nSequenceOverride = 0x2720; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_nOrientationType = 0x2878; // ParticleOrientationChoiceList_t
		constexpr uint32_t m_nOrientationControlPoint = 0x287c; // int32
		constexpr uint32_t m_bUseYawWithNormalAligned = 0x2880; // bool
		constexpr uint32_t m_flMinSize = 0x2888; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flMaxSize = 0x29e0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flAlphaAdjustWithSizeAdjust = 0x2b38; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flStartFadeSize = 0x2c90; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flEndFadeSize = 0x2de8; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flStartFadeDot = 0x2f40; // float32
		constexpr uint32_t m_flEndFadeDot = 0x2f44; // float32
		constexpr uint32_t m_bDistanceAlpha = 0x2f48; // bool
		constexpr uint32_t m_bSoftEdges = 0x2f49; // bool
		constexpr uint32_t m_flEdgeSoftnessStart = 0x2f4c; // float32
		constexpr uint32_t m_flEdgeSoftnessEnd = 0x2f50; // float32
		constexpr uint32_t m_bOutline = 0x2f54; // bool
		constexpr uint32_t m_OutlineColor = 0x2f55; // Color
		constexpr uint32_t m_nOutlineAlpha = 0x2f5c; // int32
		constexpr uint32_t m_flOutlineStart0 = 0x2f60; // float32
		constexpr uint32_t m_flOutlineStart1 = 0x2f64; // float32
		constexpr uint32_t m_flOutlineEnd0 = 0x2f68; // float32
		constexpr uint32_t m_flOutlineEnd1 = 0x2f6c; // float32
		constexpr uint32_t m_nLightingMode = 0x2f70; // ParticleLightingQuality_t
		constexpr uint32_t m_flLightingTessellation = 0x2f78; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_flLightingDirectionality = 0x30d0; // CParticleCollectionRendererFloatInput
		constexpr uint32_t m_bParticleShadows = 0x3228; // bool
		constexpr uint32_t m_flShadowDensity = 0x322c; // float32
	}
	namespace C_DOTAWearableItem {
		constexpr uint32_t m_bOwnerModelChanged = 0xae8; // bool
		constexpr uint32_t m_bIsGeneratingEconItem = 0xae9; // bool
		constexpr uint32_t m_bIsItemVisibleOnGeneratedEntity = 0xaea; // bool
		constexpr uint32_t m_bHideWearableButDrawAdditionalWearables = 0xaeb; // bool
		constexpr uint32_t m_hAdditionalWearable = 0xaec; // CHandle< CBaseAnimatingActivity >
		constexpr uint32_t m_hDrawWearable = 0xaf0; // CHandle< C_DOTAWearableItem >
		constexpr uint32_t m_bHiddenByCombiner = 0xaf4; // bool
		constexpr uint32_t m_bHiddenByEquipmentSlot = 0xaf5; // bool
		constexpr uint32_t m_bIsPortrait = 0xaf6; // bool
		constexpr uint32_t m_fZDelta = 0xaf8; // float32
		constexpr uint32_t m_combinerMaterialOverrideList = 0xb00; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
		constexpr uint32_t m_bCombinerMaterialOverrideListChanged = 0xb20; // bool
		constexpr uint32_t m_bRubickFollower = 0xb21; // bool
		constexpr uint32_t m_bHasPlayerModel = 0xb22; // bool
	}
	namespace C_EconItemView {
		constexpr uint32_t m_iItemDefinitionIndex = 0x8; // item_definition_index_t
		constexpr uint32_t m_iEntityQuality = 0xc; // int32
		constexpr uint32_t m_iEntityLevel = 0x10; // uint32
		constexpr uint32_t m_iItemID = 0x18; // itemid_t
		constexpr uint32_t m_iAccountID = 0x20; // uint32
		constexpr uint32_t m_iInventoryPosition = 0x24; // uint32
		constexpr uint32_t m_bInitialized = 0x30; // bool
		constexpr uint32_t m_nOverrideStyle = 0x31; // style_index_t
		constexpr uint32_t m_bIsStoreItem = 0x32; // bool
		constexpr uint32_t m_bIsTradeItem = 0x33; // bool
		constexpr uint32_t m_bHasComputedAttachedParticles = 0x34; // bool
		constexpr uint32_t m_bHasAttachedParticles = 0x35; // bool
		constexpr uint32_t m_iEntityQuantity = 0x38; // int32
		constexpr uint32_t m_unClientFlags = 0x3c; // uint8
		constexpr uint32_t m_unOverrideOrigin = 0x40; // eEconItemOrigin
		constexpr uint32_t m_AttributeList = 0x58; // CAttributeList
	}
	namespace C_DOTA_Item_Physical {
		constexpr uint32_t m_hItem = 0x7d0; // CHandle< C_DOTA_Item >
		constexpr uint32_t m_bIsLowPriorityHoverItem = 0x7d4; // bool
		constexpr uint32_t m_hOldItem = 0x7d8; // CHandle< C_DOTA_Item >
		constexpr uint32_t m_pszParticleName = 0x7e0; // char*
		constexpr uint32_t m_nFXIndex = 0x7e8; // ParticleIndex_t
		constexpr uint32_t m_bShowingTooltip = 0x7ec; // bool
		constexpr uint32_t m_bShowingSimpleTooltip = 0x7ed; // bool
	}
	namespace CDOTA_Buff {
		constexpr uint32_t m_bIsAura = 0x0; // bitfield:1
		constexpr uint32_t m_name = 0x28; // CUtlSymbolLarge
		constexpr uint32_t m_iszModifierAura = 0x38; // CUtlSymbolLarge
		constexpr uint32_t m_iSerialNumber = 0x48; // int32
		constexpr uint32_t m_iStringIndex = 0x4c; // int32
		constexpr uint32_t m_iIndex = 0x50; // int32
		constexpr uint32_t m_flCreationTime = 0x54; // GameTime_t
		constexpr uint32_t m_iCreationFrame = 0x58; // int32
		constexpr uint32_t m_flLastAppliedTime = 0x5c; // GameTime_t
		constexpr uint32_t m_flDuration = 0x60; // float32
		constexpr uint32_t m_flDieTime = 0x64; // GameTime_t
		constexpr uint32_t m_hCaster = 0x68; // CHandle< CBaseEntity >
		constexpr uint32_t m_hAbility = 0x6c; // CHandle< CBaseEntity >
		constexpr uint32_t m_hParent = 0x70; // CHandle< CBaseEntity >
		constexpr uint32_t m_hAuraOwner = 0x74; // CHandle< CBaseEntity >
		constexpr uint32_t m_iStackCount = 0x78; // int32
		constexpr uint32_t m_iAuraSearchTeam = 0x7c; // int16
		constexpr uint32_t m_iAuraSearchType = 0x7e; // int16
		constexpr uint32_t m_iAuraSearchFlags = 0x80; // int32
		constexpr uint32_t m_iAuraRadius = 0x84; // int32
		constexpr uint32_t m_iTeam = 0x88; // int32
		constexpr uint32_t m_iAttributes = 0x8c; // int32
		constexpr uint32_t m_iPaddingToMakeSchemaHappy2 = 0x90; // int16
		constexpr uint32_t m_bPurgedDestroy = 0x93; // bool
		constexpr uint32_t m_flPreviousTick = 0x94; // GameTime_t
		constexpr uint32_t m_flThinkInterval = 0x98; // float32
		constexpr uint32_t m_flThinkTimeAccumulator = 0x9c; // float32
		constexpr uint32_t m_iParticles = 0xa0; // CUtlVector< CDOTA_BuffParticle >
		constexpr uint32_t m_hAuraUnits = 0xb8; // CUtlVector< CHandle< CBaseEntity > >
		constexpr uint32_t m_hScriptScope = 0x1330; // HSCRIPT
	}
	namespace CParticleFunctionRenderer {
		constexpr uint32_t VisibilityInputs = 0x1b8; // CParticleVisibilityInputs
		constexpr uint32_t m_bCannotBeRefracted = 0x200; // bool
		constexpr uint32_t m_bSkipRenderingOnMobile = 0x201; // bool
	}
	namespace CNewParticleEffect {
		constexpr uint32_t m_bDontRemove = 0x0; // bitfield:1
		constexpr uint32_t m_pNext = 0x10; // CNewParticleEffect*
		constexpr uint32_t m_pPrev = 0x18; // CNewParticleEffect*
		constexpr uint32_t m_pParticles = 0x20; // IParticleCollection*
		constexpr uint32_t m_pDebugName = 0x28; // char*
		constexpr uint32_t m_vSortOrigin = 0x40; // Vector
		constexpr uint32_t m_flScale = 0x4c; // float32
		constexpr uint32_t m_hOwner = 0x50; // PARTICLE_EHANDLE__*
		constexpr uint32_t m_pOwningParticleProperty = 0x58; // CParticleProperty*
		constexpr uint32_t m_flFreezeTransitionStart = 0x70; // float32
		constexpr uint32_t m_flFreezeTransitionDuration = 0x74; // float32
		constexpr uint32_t m_flFreezeTransitionOverride = 0x78; // float32
		constexpr uint32_t m_bFreezeTransitionActive = 0x7c; // bool
		constexpr uint32_t m_bFreezeTargetState = 0x7d; // bool
		constexpr uint32_t m_bCanFreeze = 0x7e; // bool
		constexpr uint32_t m_LastMin = 0x80; // Vector
		constexpr uint32_t m_LastMax = 0x8c; // Vector
		constexpr uint32_t m_nSplitScreenUser = 0x98; // CSplitScreenSlot
		constexpr uint32_t m_vecAggregationCenter = 0x9c; // Vector
		constexpr uint32_t m_RefCount = 0xc0; // int32
	}
	namespace CParticleSystemDefinition {
		constexpr uint32_t m_nBehaviorVersion = 0x8; // int32
		constexpr uint32_t m_PreEmissionOperators = 0x10; // CUtlVector< CParticleFunctionPreEmission* >
		constexpr uint32_t m_Emitters = 0x28; // CUtlVector< CParticleFunctionEmitter* >
		constexpr uint32_t m_Initializers = 0x40; // CUtlVector< CParticleFunctionInitializer* >
		constexpr uint32_t m_Operators = 0x58; // CUtlVector< CParticleFunctionOperator* >
		constexpr uint32_t m_ForceGenerators = 0x70; // CUtlVector< CParticleFunctionForce* >
		constexpr uint32_t m_Constraints = 0x88; // CUtlVector< CParticleFunctionConstraint* >
		constexpr uint32_t m_Renderers = 0xa0; // CUtlVector< CParticleFunctionRenderer* >
		constexpr uint32_t m_Children = 0xb8; // CUtlVector< ParticleChildrenInfo_t >
		constexpr uint32_t m_nFirstMultipleOverride_BackwardCompat = 0x178; // int32
		constexpr uint32_t m_nInitialParticles = 0x210; // int32
		constexpr uint32_t m_nMaxParticles = 0x214; // int32
		constexpr uint32_t m_nGroupID = 0x218; // int32
		constexpr uint32_t m_BoundingBoxMin = 0x21c; // Vector
		constexpr uint32_t m_BoundingBoxMax = 0x228; // Vector
		constexpr uint32_t m_flDepthSortBias = 0x234; // float32
		constexpr uint32_t m_nSortOverridePositionCP = 0x238; // int32
		constexpr uint32_t m_bInfiniteBounds = 0x23c; // bool
		constexpr uint32_t m_bEnableNamedValues = 0x23d; // bool
		constexpr uint32_t m_NamedValueDomain = 0x240; // CUtlString
		constexpr uint32_t m_NamedValueLocals = 0x248; // CUtlVector< ParticleNamedValueSource_t* >
		constexpr uint32_t m_ConstantColor = 0x260; // Color
		constexpr uint32_t m_ConstantNormal = 0x264; // Vector
		constexpr uint32_t m_flConstantRadius = 0x270; // float32
		constexpr uint32_t m_flConstantRotation = 0x274; // float32
		constexpr uint32_t m_flConstantRotationSpeed = 0x278; // float32
		constexpr uint32_t m_flConstantLifespan = 0x27c; // float32
		constexpr uint32_t m_nConstantSequenceNumber = 0x280; // int32
		constexpr uint32_t m_nConstantSequenceNumber1 = 0x284; // int32
		constexpr uint32_t m_nSnapshotControlPoint = 0x288; // int32
		constexpr uint32_t m_hSnapshot = 0x290; // CStrongHandle< InfoForResourceTypeIParticleSnapshot >
		constexpr uint32_t m_pszCullReplacementName = 0x298; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_flCullRadius = 0x2a0; // float32
		constexpr uint32_t m_flCullFillCost = 0x2a4; // float32
		constexpr uint32_t m_nCullControlPoint = 0x2a8; // int32
		constexpr uint32_t m_hFallback = 0x2b0; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_nFallbackMaxCount = 0x2b8; // int32
		constexpr uint32_t m_hLowViolenceDef = 0x2c0; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_hReferenceReplacement = 0x2c8; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
		constexpr uint32_t m_flPreSimulationTime = 0x2d0; // float32
		constexpr uint32_t m_flStopSimulationAfterTime = 0x2d4; // float32
		constexpr uint32_t m_flMaximumTimeStep = 0x2d8; // float32
		constexpr uint32_t m_flMaximumSimTime = 0x2dc; // float32
		constexpr uint32_t m_flMinimumSimTime = 0x2e0; // float32
		constexpr uint32_t m_flMinimumTimeStep = 0x2e4; // float32
		constexpr uint32_t m_nMinimumFrames = 0x2e8; // int32
		constexpr uint32_t m_nMinCPULevel = 0x2ec; // int32
		constexpr uint32_t m_nMinGPULevel = 0x2f0; // int32
		constexpr uint32_t m_flNoDrawTimeToGoToSleep = 0x2f4; // float32
		constexpr uint32_t m_flMaxDrawDistance = 0x2f8; // float32
		constexpr uint32_t m_flStartFadeDistance = 0x2fc; // float32
		constexpr uint32_t m_flMaxCreationDistance = 0x300; // float32
		constexpr uint32_t m_nAggregationMinAvailableParticles = 0x304; // int32
		constexpr uint32_t m_flAggregateRadius = 0x308; // float32
		constexpr uint32_t m_bShouldBatch = 0x30c; // bool
		constexpr uint32_t m_bShouldHitboxesFallbackToRenderBounds = 0x30d; // bool
		constexpr uint32_t m_bShouldHitboxesFallbackToSnapshot = 0x30e; // bool
		constexpr uint32_t m_bShouldHitboxesFallbackToCollisionHulls = 0x30f; // bool
		constexpr uint32_t m_nViewModelEffect = 0x310; // InheritableBoolType_t
		constexpr uint32_t m_bScreenSpaceEffect = 0x314; // bool
		constexpr uint32_t m_pszTargetLayerID = 0x318; // CUtlSymbolLarge
		constexpr uint32_t m_nSkipRenderControlPoint = 0x320; // int32
		constexpr uint32_t m_nAllowRenderControlPoint = 0x324; // int32
		constexpr uint32_t m_bShouldSort = 0x328; // bool
		constexpr uint32_t m_controlPointConfigurations = 0x370; // CUtlVector< ParticleControlPointConfiguration_t >
	}
	namespace CParticleVecInput {
		constexpr uint32_t m_nType = 0x10; // ParticleVecType_t
		constexpr uint32_t m_vLiteralValue = 0x14; // Vector
		constexpr uint32_t m_LiteralColor = 0x20; // Color
		constexpr uint32_t m_NamedValue = 0x28; // CParticleNamedValueRef
		constexpr uint32_t m_bFollowNamedValue = 0x68; // bool
		constexpr uint32_t m_nVectorAttribute = 0x6c; // ParticleAttributeIndex_t
		constexpr uint32_t m_vVectorAttributeScale = 0x70; // Vector
		constexpr uint32_t m_nControlPoint = 0x7c; // int32
		constexpr uint32_t m_nDeltaControlPoint = 0x80; // int32
		constexpr uint32_t m_vCPValueScale = 0x84; // Vector
		constexpr uint32_t m_vCPRelativePosition = 0x90; // Vector
		constexpr uint32_t m_vCPRelativeDir = 0x9c; // Vector
		constexpr uint32_t m_FloatComponentX = 0xa8; // CParticleFloatInput
		constexpr uint32_t m_FloatComponentY = 0x200; // CParticleFloatInput
		constexpr uint32_t m_FloatComponentZ = 0x358; // CParticleFloatInput
		constexpr uint32_t m_FloatInterp = 0x4b0; // CParticleFloatInput
		constexpr uint32_t m_flInterpInput0 = 0x608; // float32
		constexpr uint32_t m_flInterpInput1 = 0x60c; // float32
		constexpr uint32_t m_vInterpOutput0 = 0x610; // Vector
		constexpr uint32_t m_vInterpOutput1 = 0x61c; // Vector
		constexpr uint32_t m_Gradient = 0x628; // CColorGradient
		constexpr uint32_t m_vRandomMin = 0x640; // Vector
		constexpr uint32_t m_vRandomMax = 0x64c; // Vector
	}
}