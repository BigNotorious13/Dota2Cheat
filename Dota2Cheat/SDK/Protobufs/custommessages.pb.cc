// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: custommessages.proto

#include "custommessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR CDOTAGameAccountPlus::CDOTAGameAccountPlus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.account_id_)*/0
  , /*decltype(_impl_.original_start_date_)*/0
  , /*decltype(_impl_.plus_flags_)*/0
  , /*decltype(_impl_.plus_status_)*/0
  , /*decltype(_impl_.prepaid_time_start_)*/0
  , /*decltype(_impl_.prepaid_time_balance_)*/0
  , /*decltype(_impl_.next_payment_date_)*/0
  , /*decltype(_impl_.steam_agreement_id_)*/0} {}
struct CDOTAGameAccountPlusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDOTAGameAccountPlusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDOTAGameAccountPlusDefaultTypeInternal() {}
  union {
    CDOTAGameAccountPlus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDOTAGameAccountPlusDefaultTypeInternal _CDOTAGameAccountPlus_default_instance_;
static ::_pb::Metadata file_level_metadata_custommessages_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_custommessages_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_custommessages_2eproto = nullptr;

const uint32_t TableStruct_custommessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.original_start_date_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.plus_flags_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.plus_status_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.prepaid_time_start_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.prepaid_time_balance_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.next_payment_date_),
  PROTOBUF_FIELD_OFFSET(::CDOTAGameAccountPlus, _impl_.steam_agreement_id_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::CDOTAGameAccountPlus)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_CDOTAGameAccountPlus_default_instance_._instance,
};

const char descriptor_table_protodef_custommessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024custommessages.proto\"\341\001\n\024CDOTAGameAcco"
  "untPlus\022\022\n\naccount_id\030\001 \002(\005\022\033\n\023original_"
  "start_date\030\002 \002(\005\022\022\n\nplus_flags\030\003 \002(\005\022\023\n\013"
  "plus_status\030\004 \002(\005\022\032\n\022prepaid_time_start\030"
  "\005 \002(\005\022\034\n\024prepaid_time_balance\030\006 \002(\005\022\031\n\021n"
  "ext_payment_date\030\007 \002(\005\022\032\n\022steam_agreemen"
  "t_id\030\010 \002(\005"
  ;
static ::_pbi::once_flag descriptor_table_custommessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_custommessages_2eproto = {
    false, false, 250, descriptor_table_protodef_custommessages_2eproto,
    "custommessages.proto",
    &descriptor_table_custommessages_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_custommessages_2eproto::offsets,
    file_level_metadata_custommessages_2eproto, file_level_enum_descriptors_custommessages_2eproto,
    file_level_service_descriptors_custommessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_custommessages_2eproto_getter() {
  return &descriptor_table_custommessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_custommessages_2eproto(&descriptor_table_custommessages_2eproto);

// ===================================================================

class CDOTAGameAccountPlus::_Internal {
 public:
  using HasBits = decltype(std::declval<CDOTAGameAccountPlus>()._impl_._has_bits_);
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_original_start_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_plus_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_plus_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prepaid_time_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prepaid_time_balance(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_next_payment_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_steam_agreement_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

CDOTAGameAccountPlus::CDOTAGameAccountPlus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CDOTAGameAccountPlus)
}
CDOTAGameAccountPlus::CDOTAGameAccountPlus(const CDOTAGameAccountPlus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CDOTAGameAccountPlus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){}
    , decltype(_impl_.original_start_date_){}
    , decltype(_impl_.plus_flags_){}
    , decltype(_impl_.plus_status_){}
    , decltype(_impl_.prepaid_time_start_){}
    , decltype(_impl_.prepaid_time_balance_){}
    , decltype(_impl_.next_payment_date_){}
    , decltype(_impl_.steam_agreement_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.account_id_, &from._impl_.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.steam_agreement_id_) -
    reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.steam_agreement_id_));
  // @@protoc_insertion_point(copy_constructor:CDOTAGameAccountPlus)
}

inline void CDOTAGameAccountPlus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.account_id_){0}
    , decltype(_impl_.original_start_date_){0}
    , decltype(_impl_.plus_flags_){0}
    , decltype(_impl_.plus_status_){0}
    , decltype(_impl_.prepaid_time_start_){0}
    , decltype(_impl_.prepaid_time_balance_){0}
    , decltype(_impl_.next_payment_date_){0}
    , decltype(_impl_.steam_agreement_id_){0}
  };
}

CDOTAGameAccountPlus::~CDOTAGameAccountPlus() {
  // @@protoc_insertion_point(destructor:CDOTAGameAccountPlus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CDOTAGameAccountPlus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CDOTAGameAccountPlus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CDOTAGameAccountPlus::Clear() {
// @@protoc_insertion_point(message_clear_start:CDOTAGameAccountPlus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.steam_agreement_id_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.steam_agreement_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CDOTAGameAccountPlus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_account_id(&has_bits);
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 original_start_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_original_start_date(&has_bits);
          _impl_.original_start_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 plus_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_plus_flags(&has_bits);
          _impl_.plus_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 plus_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_plus_status(&has_bits);
          _impl_.plus_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 prepaid_time_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prepaid_time_start(&has_bits);
          _impl_.prepaid_time_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 prepaid_time_balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_prepaid_time_balance(&has_bits);
          _impl_.prepaid_time_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 next_payment_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_next_payment_date(&has_bits);
          _impl_.next_payment_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 steam_agreement_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_steam_agreement_id(&has_bits);
          _impl_.steam_agreement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CDOTAGameAccountPlus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDOTAGameAccountPlus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // required int32 original_start_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_original_start_date(), target);
  }

  // required int32 plus_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_plus_flags(), target);
  }

  // required int32 plus_status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_plus_status(), target);
  }

  // required int32 prepaid_time_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_prepaid_time_start(), target);
  }

  // required int32 prepaid_time_balance = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_prepaid_time_balance(), target);
  }

  // required int32 next_payment_date = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_next_payment_date(), target);
  }

  // required int32 steam_agreement_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_steam_agreement_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDOTAGameAccountPlus)
  return target;
}

size_t CDOTAGameAccountPlus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CDOTAGameAccountPlus)
  size_t total_size = 0;

  if (_internal_has_account_id()) {
    // required int32 account_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
  }

  if (_internal_has_original_start_date()) {
    // required int32 original_start_date = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_original_start_date());
  }

  if (_internal_has_plus_flags()) {
    // required int32 plus_flags = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plus_flags());
  }

  if (_internal_has_plus_status()) {
    // required int32 plus_status = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plus_status());
  }

  if (_internal_has_prepaid_time_start()) {
    // required int32 prepaid_time_start = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prepaid_time_start());
  }

  if (_internal_has_prepaid_time_balance()) {
    // required int32 prepaid_time_balance = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prepaid_time_balance());
  }

  if (_internal_has_next_payment_date()) {
    // required int32 next_payment_date = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_payment_date());
  }

  if (_internal_has_steam_agreement_id()) {
    // required int32 steam_agreement_id = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_steam_agreement_id());
  }

  return total_size;
}
size_t CDOTAGameAccountPlus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CDOTAGameAccountPlus)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required int32 account_id = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());

    // required int32 original_start_date = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_original_start_date());

    // required int32 plus_flags = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plus_flags());

    // required int32 plus_status = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_plus_status());

    // required int32 prepaid_time_start = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prepaid_time_start());

    // required int32 prepaid_time_balance = 6;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prepaid_time_balance());

    // required int32 next_payment_date = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_next_payment_date());

    // required int32 steam_agreement_id = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_steam_agreement_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CDOTAGameAccountPlus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CDOTAGameAccountPlus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CDOTAGameAccountPlus::GetClassData() const { return &_class_data_; }


void CDOTAGameAccountPlus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CDOTAGameAccountPlus*>(&to_msg);
  auto& from = static_cast<const CDOTAGameAccountPlus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CDOTAGameAccountPlus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.original_start_date_ = from._impl_.original_start_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.plus_flags_ = from._impl_.plus_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.plus_status_ = from._impl_.plus_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.prepaid_time_start_ = from._impl_.prepaid_time_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.prepaid_time_balance_ = from._impl_.prepaid_time_balance_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.next_payment_date_ = from._impl_.next_payment_date_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.steam_agreement_id_ = from._impl_.steam_agreement_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CDOTAGameAccountPlus::CopyFrom(const CDOTAGameAccountPlus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CDOTAGameAccountPlus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAGameAccountPlus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CDOTAGameAccountPlus::InternalSwap(CDOTAGameAccountPlus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDOTAGameAccountPlus, _impl_.steam_agreement_id_)
      + sizeof(CDOTAGameAccountPlus::_impl_.steam_agreement_id_)
      - PROTOBUF_FIELD_OFFSET(CDOTAGameAccountPlus, _impl_.account_id_)>(
          reinterpret_cast<char*>(&_impl_.account_id_),
          reinterpret_cast<char*>(&other->_impl_.account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CDOTAGameAccountPlus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_custommessages_2eproto_getter, &descriptor_table_custommessages_2eproto_once,
      file_level_metadata_custommessages_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CDOTAGameAccountPlus*
Arena::CreateMaybeMessage< ::CDOTAGameAccountPlus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CDOTAGameAccountPlus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
