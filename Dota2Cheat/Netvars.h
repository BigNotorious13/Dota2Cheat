#pragma once
#include <cstdint>
namespace Netvars {
	namespace C_BaseCombatCharacter {
		constexpr uint32_t m_hMyWearables = 0xb30; // C_NetworkUtlVectorBase< CHandle< C_EconWearable > >
		constexpr uint32_t m_bloodColor = 0xb48; // int32
		constexpr uint32_t m_flWaterNextTraceTime = 0xb58; // float32
		constexpr uint32_t m_leftFootAttachment = 0xb4c; // AttachmentHandle_t
		constexpr uint32_t m_rightFootAttachment = 0xb4d; // AttachmentHandle_t
		constexpr uint32_t m_nWaterWakeMode = 0xb50; // C_BaseCombatCharacter::WaterWakeMode_t
		constexpr uint32_t m_flWaterWorldZ = 0xb54; // float32
		constexpr uint32_t m_flFieldOfView = 0xb5c; // float32
	}
	namespace C_BaseEntity {
		constexpr uint32_t m_CBodyComponent = 0x38; // CBodyComponent*
		constexpr uint32_t m_NetworkTransmitComponent = 0x40; // CNetworkTransmitComponent
		constexpr uint32_t m_MoveCollide = 0x440; // MoveCollide_t
		constexpr uint32_t m_iHealth = 0x324; // int32
		constexpr uint32_t m_hSceneObjectController = 0x334; // CHandle< C_BaseEntity >
		constexpr uint32_t m_vecVelocity = 0x3d0; // CNetworkVelocityVector
		constexpr uint32_t m_nLastThinkTick = 0x300; // int32
		constexpr uint32_t m_pGameSceneNode = 0x308; // CGameSceneNode*
		constexpr uint32_t m_pRenderComponent = 0x310; // CRenderComponent*
		constexpr uint32_t m_pCollision = 0x318; // CCollisionProperty*
		constexpr uint32_t m_nNoInterpolationTick = 0x338; // int32
		constexpr uint32_t m_hThink = 0x468; // uint16
		constexpr uint32_t m_iMaxHealth = 0x320; // int32
		constexpr uint32_t m_EntClientFlags = 0x3b4; // uint16
		constexpr uint32_t m_bClientSideRagdoll = 0x3b6; // bool
		constexpr uint32_t m_bInterpolateEvenWithNoModel = 0x349; // bool
		constexpr uint32_t m_lifeState = 0x328; // uint8
		constexpr uint32_t m_fBBoxVisFlags = 0x478; // uint8
		constexpr uint32_t m_iTeamNum = 0x3b7; // uint8
		constexpr uint32_t m_takedamage = 0x329; // DamageOptions_t
		constexpr uint32_t m_bTakesDamage = 0x32a; // bool
		constexpr uint32_t m_flElasticity = 0x454; // float32
		constexpr uint32_t m_nInterpolationLatchDirtyFlags = 0x38c; // int32[2]
		constexpr uint32_t m_iCurrentThinkContext = 0x364; // int32
		constexpr uint32_t m_nSubclassID = 0x350; // CUtlStringToken
		constexpr uint32_t m_nTakeDamageFlags = 0x32c; // TakeDamageFlags_t
		constexpr uint32_t m_fEffects = 0x448; // uint32
		constexpr uint32_t m_ubInterpolationFrame = 0x330; // uint8
		constexpr uint32_t m_nVisibilityNoInterpolationTick = 0x33c; // int32
		constexpr uint32_t m_flProxyRandomValue = 0x340; // float32
		constexpr uint32_t m_nMinCPULevel = 0x45e; // uint8
		constexpr uint32_t m_bHasSuccessfullyInterpolated = 0x389; // bool
		constexpr uint32_t m_flSpeed = 0x3b0; // float32
		constexpr uint32_t m_bHasAddedVarsToInterpolation = 0x38a; // bool
		constexpr uint32_t m_iEFlags = 0x344; // int32
		constexpr uint32_t m_nWaterType = 0x348; // uint8
		constexpr uint32_t m_bPredictionEligible = 0x34a; // bool
		constexpr uint32_t m_bApplyLayerMatchIDToModel = 0x34b; // bool
		constexpr uint32_t m_tokLayerMatchID = 0x34c; // CUtlStringToken
		constexpr uint32_t m_nSimulationTick = 0x360; // int32
		constexpr uint32_t m_nSceneObjectOverrideFlags = 0x388; // uint8
		constexpr uint32_t m_aThinkFunctions = 0x368; // CUtlVector< thinkfunc_t >
		constexpr uint32_t m_flAnimTime = 0x380; // float32
		constexpr uint32_t m_ListEntry = 0x394; // uint16[11]
		constexpr uint32_t m_bSimulatedEveryTick = 0x45c; // bool
		constexpr uint32_t m_flSimulationTime = 0x384; // float32
		constexpr uint32_t m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x38b; // bool
		constexpr uint32_t m_flCreateTime = 0x3ac; // float32
		constexpr uint32_t m_nMinGPULevel = 0x460; // uint8
		constexpr uint32_t m_spawnflags = 0x3b8; // uint32
		constexpr uint32_t m_flFriction = 0x450; // float32
		constexpr uint32_t m_nNextThinkTick = 0x3bc; // int32
		constexpr uint32_t m_fFlags = 0x3c0; // uint32
		constexpr uint32_t m_vecAbsVelocity = 0x3c4; // Vector
		constexpr uint32_t m_nMaxCPULevel = 0x45f; // uint8
		constexpr uint32_t m_hOwnerEntity = 0x43c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hEffectEntity = 0x438; // CHandle< C_BaseEntity >
		constexpr uint32_t m_flWaterLevel = 0x444; // float32
		constexpr uint32_t m_MoveType = 0x441; // MoveType_t
		constexpr uint32_t m_hGroundEntity = 0x44c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_flGravityScale = 0x458; // float32
		constexpr uint32_t m_bAnimatedEveryTick = 0x45d; // bool
		constexpr uint32_t m_nCreationTick = 0x538; // int32
		constexpr uint32_t m_nMaxGPULevel = 0x461; // uint8
		constexpr uint32_t m_flNavIgnoreUntilTime = 0x464; // float32
		constexpr uint32_t m_bPredictable = 0x479; // bool
		constexpr uint32_t m_bRenderWithViewModels = 0x47a; // bool
		constexpr uint32_t m_nSplitUserPlayerPredictionSlot = 0x47c; // CSplitScreenSlot
		constexpr uint32_t m_nFirstPredictableCommand = 0x480; // int32
		constexpr uint32_t m_nLastPredictableCommand = 0x484; // int32
		constexpr uint32_t m_hOldMoveParent = 0x488; // CHandle< C_BaseEntity >
		constexpr uint32_t m_Particles = 0x490; // CParticleProperty
		constexpr uint32_t m_vecPredictedScriptFloats = 0x4b8; // CUtlVector< float32 >
		constexpr uint32_t m_vecPredictedScriptFloatIDs = 0x4d0; // CUtlVector< int32 >
		constexpr uint32_t m_nNextScriptVarRecordID = 0x500; // int32
		constexpr uint32_t m_vecAngVelocity = 0x510; // QAngle
		constexpr uint32_t m_DataChangeEventRef = 0x51c; // int32
		constexpr uint32_t m_dependencies = 0x520; // CUtlVector< CEntityHandle >
		constexpr uint32_t m_bAnimTimeChanged = 0x551; // bool
		constexpr uint32_t m_bSimulationTimeChanged = 0x552; // bool
		constexpr uint32_t m_sUniqueHammerID = 0x560; // CUtlString
	}
	namespace C_DOTA_Item {
		constexpr uint32_t m_bPurchasable = 0x5f1; // bool
		constexpr uint32_t m_bGloballyCombinable = 0x5f9; // bool
		constexpr uint32_t m_bRecipe = 0x5e8; // bool
		constexpr uint32_t m_bCombinable = 0x5e0; // bool
		constexpr uint32_t m_bIsNeutralDrop = 0x5fb; // bool
		constexpr uint32_t m_bPermanent = 0x5e1; // bool
		constexpr uint32_t m_bStackable = 0x5e2; // bool
		constexpr uint32_t m_iStackableMax = 0x5e4; // int32
		constexpr uint32_t m_iSharability = 0x5ec; // int32
		constexpr uint32_t m_bDroppable = 0x5f0; // bool
		constexpr uint32_t m_iInitialCharges = 0x604; // int32
		constexpr uint32_t m_bSellable = 0x5f2; // bool
		constexpr uint32_t m_hOldOwnerEntity = 0x644; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bInitiallySellable = 0x5f3; // bool
		constexpr uint32_t m_bCastOnPickup = 0x608; // bool
		constexpr uint32_t m_bForceUnsellable = 0x5f4; // bool
		constexpr uint32_t m_bDisplayCharges = 0x5f6; // bool
		constexpr uint32_t m_bRequiresCharges = 0x5f5; // bool
		constexpr uint32_t m_bHideCharges = 0x5f7; // bool
		constexpr uint32_t m_flPurchaseTime = 0x61c; // float32
		constexpr uint32_t m_bKillable = 0x5f8; // bool
		constexpr uint32_t m_bDisassemblable = 0x5fa; // bool
		constexpr uint32_t m_vecPreGameTransferPlayerIDs = 0x650; // C_NetworkUtlVectorBase< uint8 >
		constexpr uint32_t m_flAssembledTime = 0x620; // float32
		constexpr uint32_t m_nNeutralDropTeam = 0x5fc; // int32
		constexpr uint32_t m_bAlertable = 0x600; // bool
		constexpr uint32_t m_iOldCharges = 0x648; // int32
		constexpr uint32_t m_bOnlyPlayerHeroPickup = 0x609; // bool
		constexpr uint32_t m_bDisplayOwnership = 0x630; // bool
		constexpr uint32_t m_bCreepHeroPickup = 0x60a; // bool
		constexpr uint32_t m_iValuelessCharges = 0x60c; // int32
		constexpr uint32_t m_iCurrentCharges = 0x610; // int32
		constexpr uint32_t m_iSecondaryCharges = 0x614; // int32
		constexpr uint32_t m_bCombineLocked = 0x618; // bool
		constexpr uint32_t m_bPurchasedWhileDead = 0x624; // bool
		constexpr uint32_t m_bCanBeUsedOutOfInventory = 0x625; // bool
		constexpr uint32_t m_bItemEnabled = 0x626; // bool
		constexpr uint32_t m_flEnableTime = 0x628; // float32
		constexpr uint32_t m_flReclaimTime = 0x62c; // float32
		constexpr uint32_t m_bShowOnMinimap = 0x631; // bool
		constexpr uint32_t m_flMinimapIconSize = 0x634; // float32
		constexpr uint32_t m_bIsUpgradeable = 0x638; // bool
		constexpr uint32_t m_nUpgradeGoal = 0x640; // int32
		constexpr uint32_t m_nUpgradeProgress = 0x63c; // int32
		constexpr uint32_t m_iPlayerOwnerID = 0x64c; // PlayerID_t
	}
	namespace PlayerResourcePlayerData_t {
		constexpr uint32_t m_bFullyJoinedServer = 0x44; // bool
		constexpr uint32_t m_bIsValid = 0x30; // bool
		constexpr uint32_t m_bIsBroadcasterChannelCameraman = 0x50; // bool
		constexpr uint32_t m_iBroadcasterChannelSlot = 0x4c; // uint32
		constexpr uint32_t m_bIsBroadcaster = 0x46; // bool
		constexpr uint32_t m_bIsPlusSubscriber = 0x8c; // bool
		constexpr uint32_t m_bFakeClient = 0x45; // bool
		constexpr uint32_t m_vecPrivateCoachPlayerIDs = 0x68; // C_NetworkUtlVectorBase< PlayerID_t >
		constexpr uint32_t m_iszPlayerName = 0x38; // CUtlSymbolLarge
		constexpr uint32_t m_iPlayerTeam = 0x40; // int32
		constexpr uint32_t m_iBroadcasterChannel = 0x48; // uint32
		constexpr uint32_t m_unCoachRating = 0x80; // uint32
		constexpr uint32_t m_iConnectionState = 0x54; // int32
		constexpr uint32_t m_iPlayerSteamID = 0x58; // uint64
		constexpr uint32_t m_eCoachTeam = 0x60; // DOTATeam_t
		constexpr uint32_t m_eLiveSpectatorTeam = 0x84; // DOTATeam_t
		constexpr uint32_t m_nLiveSpectatorSpectatedHeroIndex = 0x88; // int32
		constexpr uint32_t m_bWasMVPLastGame = 0x8d; // bool
		constexpr uint32_t m_nCavernCrawlMapVariant = 0x8e; // CavernCrawlMapVariant_t
		constexpr uint32_t m_eAccoladeType = 0x90; // int32[3]
		constexpr uint32_t m_unAccoladeData = 0xa0; // uint64[3]
		constexpr uint32_t m_iTitle = 0xbc; // int32
		constexpr uint32_t m_iRankTier = 0xb8; // int32
		constexpr uint32_t m_unFavTeamPacked = 0xc0; // uint64
		constexpr uint32_t m_nPlayerSlot = 0xc8; // CPlayerSlot
		constexpr uint32_t m_bIsBot = 0xcc; // bool
	}
	namespace C_DOTABaseAbility {
		constexpr uint32_t m_bAltCastState = 0x570; // bool
		constexpr uint32_t m_iEnemyLevel = 0x574; // int32
		constexpr uint32_t m_bReplicated = 0x5ca; // bool
		constexpr uint32_t m_iMaxLevel = 0x578; // int32
		constexpr uint32_t m_flUpgradeBlend = 0x580; // float32
		constexpr uint32_t m_bRefCountsModifiers = 0x586; // bool
		constexpr uint32_t m_bInIndefiniteCooldown = 0x5c0; // bool
		constexpr uint32_t m_bConsiderOvershootInGetCastRange = 0x585; // bool
		constexpr uint32_t m_fAbilityChargeRestoreTimeRemaining = 0x5d0; // float32
		constexpr uint32_t m_bUpgradedDuringQuickcastPreview = 0x584; // bool
		constexpr uint32_t m_bCanLearn = 0x57c; // bool
		constexpr uint32_t m_bHidden = 0x587; // bool
		constexpr uint32_t m_bAutoCastState = 0x5b4; // bool
		constexpr uint32_t m_bOldHidden = 0x588; // bool
		constexpr uint32_t m_bActivated = 0x589; // bool
		constexpr uint32_t m_bOldActivated = 0x58a; // bool
		constexpr uint32_t m_nAbilityBarType = 0x58c; // AbilityBarType_t
		constexpr uint32_t m_iDirtyButtons = 0x590; // int32
		constexpr uint32_t m_bPerformDirtyParity = 0x594; // bool
		constexpr uint32_t m_iManaCost = 0x5b0; // int32
		constexpr uint32_t m_iLevel = 0x598; // int32
		constexpr uint32_t m_bAbilityLevelDirty = 0x59c; // bool
		constexpr uint32_t m_flOverrideCastPoint = 0x5c4; // float32
		constexpr uint32_t m_bToggleState = 0x59d; // bool
		constexpr uint32_t m_bFrozenCooldown = 0x5c1; // bool
		constexpr uint32_t m_flAbilityMuteDuration = 0x5a0; // float32
		constexpr uint32_t m_bInAbilityPhase = 0x5a4; // bool
		constexpr uint32_t m_fCooldown = 0x5a8; // float32
		constexpr uint32_t m_flCooldownLength = 0x5ac; // float32
		constexpr uint32_t m_flChannelStartTime = 0x5b8; // float32
		constexpr uint32_t m_flCastStartTime = 0x5bc; // float32
		constexpr uint32_t m_bStolen = 0x5c8; // bool
		constexpr uint32_t m_bStealable = 0x5c9; // bool
		constexpr uint32_t m_nAbilityCurrentCharges = 0x5cc; // int32
		constexpr uint32_t m_bUpgradeRecommended = 0x5d4; // bool
		constexpr uint32_t m_flLastCastClickTime = 0x5d8; // float32
	}
	namespace C_NextBotCombatCharacter {
		constexpr uint32_t m_flFrustumDistanceSqr = 0xbe0; // float32
		constexpr uint32_t m_shadowTimer = 0xbc0; // CountdownTimer
		constexpr uint32_t m_nLod = 0xbe4; // uint8
		constexpr uint32_t m_bInFrustum = 0xbd8; // bool
		constexpr uint32_t m_nInFrustumFrame = 0xbdc; // int32
	}
	namespace C_DOTA_BaseNPC {
		constexpr uint32_t m_flCollisionPadding = 0xd2c; // float32
		constexpr uint32_t m_iUnitType = 0xbfc; // uint32
		constexpr uint32_t m_bIsPhantom = 0xbf8; // bool
		constexpr uint32_t m_bHasCostume = 0x1591; // bool
		constexpr uint32_t m_bIsAncient = 0xc18; // bool
		constexpr uint32_t m_flRingRadius = 0xd30; // float32
		constexpr uint32_t m_bCanRespawn = 0xc3c; // bool
		constexpr uint32_t m_bSelectionRingVisible = 0xc10; // bool
		constexpr uint32_t m_bIsBossCreature = 0xc19; // bool
		constexpr uint32_t m_flManaThinkRegen = 0xc7c; // float32
		constexpr uint32_t m_iCurrentLevel = 0xc14; // int32
		constexpr uint32_t m_NetworkActivity = 0x16b0; // int32
		constexpr uint32_t m_iHealthBarHighlightColor = 0xc70; // Color
		constexpr uint32_t m_iBotDebugData = 0xc90; // int32
		constexpr uint32_t m_iMoveSpeed = 0xc5c; // int32
		constexpr uint32_t m_bStolenScepter = 0xc1a; // bool
		constexpr uint32_t m_bIsNeutralUnitType = 0xc1b; // bool
		constexpr uint32_t m_bSelectOnSpawn = 0xc1c; // bool
		constexpr uint32_t m_iUnitNameIndex = 0xc68; // int32
		constexpr uint32_t m_nHealthBarOffsetOverride = 0xc38; // int32
		constexpr uint32_t m_hAbilities = 0xc98; // CHandle< C_BaseEntity >[35]
		constexpr uint32_t m_nWearableDefIndex = 0x182c; // item_definition_index_t
		constexpr uint32_t m_bCachedReplicatedMorphlingIllusion = 0xc1d; // bool
		constexpr uint32_t m_nFXDeniableIndex = 0xc58; // ParticleIndex_t
		constexpr uint32_t m_bIgnoreAddSummonedToSelection = 0xc1e; // bool
		constexpr uint32_t m_szDefaultIdle = 0x13c0; // CUtlSymbolLarge
		constexpr uint32_t m_bConsideredHero = 0xc1f; // bool
		constexpr uint32_t m_iszSoundSet = 0xd48; // CUtlSymbolLarge
		constexpr uint32_t m_bUsesConstantGesture = 0xc20; // bool
		constexpr uint32_t m_iCombatClass = 0xc44; // int32
		constexpr uint32_t m_flRefresherLastCooldown = 0xc8c; // float32
		constexpr uint32_t m_iBaseAttackSpeed = 0xc60; // int32
		constexpr uint32_t m_bUseHeroAbilityNumbers = 0xc21; // bool
		constexpr uint32_t m_iszSelectionGroup = 0xd50; // CUtlSymbolLarge
		constexpr uint32_t m_bHasSharedAbilities = 0xc22; // bool
		constexpr uint32_t m_bIsSummoned = 0xc23; // bool
		constexpr uint32_t m_bCanBeDominated = 0xc24; // bool
		constexpr uint32_t m_iszVoiceFile = 0xd58; // CUtlSymbolLarge
		constexpr uint32_t m_bHasUpgradeableAbilities = 0xc25; // bool
		constexpr uint32_t m_szUnitLabel = 0xd78; // CUtlString
		constexpr uint32_t m_flHealthThinkRegen = 0xc28; // float32
		constexpr uint32_t m_flProjectileCollisionSize = 0xd34; // float32
		constexpr uint32_t m_flRefresherUseTime = 0xc88; // float32
		constexpr uint32_t m_iIsControllableByPlayer64 = 0xc30; // uint64
		constexpr uint32_t m_iAttackRange = 0xc40; // int32
		constexpr uint32_t m_iCombatClassAttack = 0xc48; // int32
		constexpr uint32_t m_iCombatClassDefend = 0xc4c; // int32
		constexpr uint32_t m_flHullRadius = 0xd28; // float32
		constexpr uint32_t m_bIsIllusion = 0xc94; // bool
		constexpr uint32_t m_flInvisibilityLevel = 0xd24; // float32
		constexpr uint32_t m_iPrevHealthPct = 0x110c; // int32
		constexpr uint32_t m_colorGemColor = 0xc50; // Color
		constexpr uint32_t m_nUnitLabelIndex = 0xd80; // uint8
		constexpr uint32_t m_bHasColorGem = 0xc54; // bool
		constexpr uint32_t m_flBaseAttackTime = 0xc64; // float32
		constexpr uint32_t m_flMana = 0xc74; // float32
		constexpr uint32_t m_iHealthBarOffset = 0xc6c; // int32
		constexpr uint32_t m_nPoseParameterRun = 0x1224; // int32
		constexpr uint32_t m_flMaxMana = 0xc78; // float32
		constexpr uint32_t m_iBKBChargesUsed = 0xc80; // int32
		constexpr uint32_t m_iAeonChargesUsed = 0xc84; // int32
		constexpr uint32_t m_bHasClientSeenIllusionModifier = 0xc95; // bool
		constexpr uint32_t m_iPrevSequence = 0x14dc; // int32
		constexpr uint32_t m_iszUnitName = 0xd38; // CUtlSymbolLarge
		constexpr uint32_t m_strAnimationModifier = 0xd88; // CUtlString
		constexpr uint32_t m_iszParticleFolder = 0xd40; // CUtlSymbolLarge
		constexpr uint32_t m_damagetimer = 0x13d0; // CountdownTimer
		constexpr uint32_t m_iszGameSoundsFile = 0xd60; // CUtlSymbolLarge
		constexpr uint32_t m_iszVoiceBackgroundSound = 0xd68; // CUtlSymbolLarge
		constexpr uint32_t m_iszIdleSoundLoop = 0xd70; // CUtlSymbolLarge
		constexpr uint32_t m_bHasInventory = 0x1100; // bool
		constexpr uint32_t m_TerrainSpecificFootstepEffect = 0xd90; // CUtlString
		constexpr uint32_t m_bUseCustomTerrainWeatherEffect = 0xd98; // bool
		constexpr uint32_t m_bHasClientSoundReplacement = 0xd99; // bool
		constexpr uint32_t m_bHasClientReplacementParticle = 0xd9a; // bool
		constexpr uint32_t m_bResourcesLoaded = 0xda4; // bool
		constexpr uint32_t m_flRun = 0x122c; // float32
		constexpr uint32_t m_flTauntCooldown = 0xda8; // float32
		constexpr uint32_t m_flPhysicalArmorValue = 0x1400; // float32
		constexpr uint32_t m_flTauntCooldown2 = 0xdac; // float32
		constexpr uint32_t m_ActivityModifiers = 0x16c8; // CUtlVector< CUtlSymbol >
		constexpr uint32_t m_iCurShop = 0xdb0; // DOTA_SHOP_TYPE
		constexpr uint32_t m_szCurShopEntName = 0xdb8; // CUtlSymbolLarge
		constexpr uint32_t m_iDayTimeVisionRange = 0xdc0; // int32
		constexpr uint32_t m_iNightTimeVisionRange = 0xdc4; // int32
		constexpr uint32_t m_iDamageMin = 0xdc8; // int32
		constexpr uint32_t m_iDamageMax = 0xdcc; // int32
		constexpr uint32_t m_iDamageBonus = 0xdd0; // int32
		constexpr uint32_t m_iTaggedAsVisibleByTeam = 0xdd4; // int32
		constexpr uint32_t m_ModifierManager = 0xdd8; // CDOTA_ModifierManager
		constexpr uint32_t m_Inventory = 0x1030; // C_DOTA_UnitInventory
		constexpr uint32_t m_nUnitState64 = 0x10e8; // uint64
		constexpr uint32_t m_nUnitDebuffState = 0x10f8; // uint64
		constexpr uint32_t m_iAcquisitionRange = 0x1104; // int32
		constexpr uint32_t m_FoWViewID = 0x1108; // int32
		constexpr uint32_t m_iPrevLifeState = 0x1110; // int32
		constexpr uint32_t m_iPrevTeam = 0x1114; // int32
		constexpr uint32_t m_bPrevProvidesVision = 0x1118; // bool
		constexpr uint32_t m_nPrevControllableMask = 0x1120; // uint64
		constexpr uint32_t m_TagTime = 0x1130; // CountdownTimer
		constexpr uint32_t m_ClickedTime = 0x1148; // CountdownTimer
		constexpr uint32_t m_flIdleRunPoseStartTime = 0x1160; // float32[2]
		constexpr uint32_t m_flIdleRunPoseDuration = 0x1168; // float32[2]
		constexpr uint32_t m_bAnimationTransitionActive = 0x1170; // bool
		constexpr uint32_t m_nAnimationTransitionPoseParameters = 0x1174; // int32[2]
		constexpr uint32_t m_nAnimationTransitionInjuredPoseParameters = 0x117c; // int32[2]
		constexpr uint32_t m_nAnimationTransitionAggressivePoseParameters = 0x1184; // int32[2]
		constexpr uint32_t m_flTimeSinceLastAbilityNag = 0x11e8; // float32
		constexpr uint32_t m_flHealthRegen = 0x151c; // float32
		constexpr uint32_t m_iAttackCapabilities = 0x11ec; // int32
		constexpr uint32_t m_PrevNetworkActivity = 0x16b4; // int32
		constexpr uint32_t m_szDefaultRareIdle = 0x13c8; // CUtlSymbolLarge
		constexpr uint32_t m_iSpecialAbility = 0x11f0; // int32
		constexpr uint32_t m_iMoveCapabilities = 0x11f4; // int32
		constexpr uint32_t m_bMinimapDisableRotation = 0x1215; // bool
		constexpr uint32_t m_nPlayerOwnerID = 0x11f8; // PlayerID_t
		constexpr uint32_t m_combinerMaterialOverrideList = 0x1558; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
		constexpr uint32_t m_iszMinimapIcon = 0x1200; // CUtlSymbolLarge
		constexpr uint32_t m_flMinimapIconSize = 0x1210; // float32
		constexpr uint32_t m_bMinimapDisableTint = 0x1214; // bool
		constexpr uint32_t m_colorHeroGlow = 0x1216; // Color
		constexpr uint32_t m_iNearShopMask = 0x121c; // int32
		constexpr uint32_t m_bIsWaitingToSpawn = 0x1508; // bool
		constexpr uint32_t m_nPoseParameterTurn = 0x1220; // int32
		constexpr uint32_t m_bCombinerMaterialOverrideListChanged = 0x1550; // bool
		constexpr uint32_t m_bSuppressGlow = 0x123c; // bool
		constexpr uint32_t m_flLean = 0x1228; // float32
		constexpr uint32_t m_anglediff = 0x1230; // int32
		constexpr uint32_t m_bInfoKeyActive = 0x1234; // bool
		constexpr uint32_t m_bNewUpdateAssetModifiersNetworked = 0x1235; // bool
		constexpr uint32_t m_nAssetModifiersLastUpdatedTick = 0x1238; // int32
		constexpr uint32_t m_bWasSinking = 0x123d; // bool
		constexpr uint32_t m_flRangeDisplayDist = 0x1240; // float32
		constexpr uint32_t m_vRenderOrigin = 0x13e8; // Vector
		constexpr uint32_t m_fZDelta = 0x13f4; // float32
		constexpr uint32_t m_flDeathTime = 0x13f8; // float32
		constexpr uint32_t m_bBaseStatsChanged = 0x13fc; // bool
		constexpr uint32_t m_bNeedsSoundEmitterRefresh = 0x13fd; // bool
		constexpr uint32_t m_flMagicalResistanceValue = 0x1404; // float32
		constexpr uint32_t m_nPrevSequenceParity = 0x1408; // int32
		constexpr uint32_t m_flPrevInvisLevel = 0x14b0; // float32
		constexpr uint32_t m_nOriginalModelIndex = 0x14b8; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_nClientOriginalModelIndex = 0x14c0; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_nClientReplacementModelIndex = 0x14c8; // CStrongHandle< InfoForResourceTypeCModel >
		constexpr uint32_t m_bClientReplacementModelNeedsRebuild = 0x14d0; // bool
		constexpr uint32_t m_nClientReplacementModelReloadCount = 0x14d4; // int32
		constexpr uint32_t m_nUnitModelVariant = 0x14d8; // int8
		constexpr uint32_t m_nUnitModelVariantCount = 0x14d9; // int8
		constexpr uint32_t m_pLastWeatherEffectName = 0x14e0; // char*
		constexpr uint32_t m_VoiceBackgroundSoundTimer = 0x14f0; // CountdownTimer
		constexpr uint32_t m_nTotalDamageTaken = 0x1510; // int64
		constexpr uint32_t m_flManaRegen = 0x1518; // float32
		constexpr uint32_t m_bIsMoving = 0x1520; // bool
		constexpr uint32_t m_fRevealRadius = 0x1524; // float32
		constexpr uint32_t m_bCanUseWards = 0x1528; // bool
		constexpr uint32_t m_bCanUseAllItems = 0x1529; // bool
		constexpr uint32_t m_iXPBounty = 0x152c; // int32
		constexpr uint32_t m_iXPBountyExtra = 0x1530; // int32
		constexpr uint32_t m_iGoldBountyMin = 0x1534; // int32
		constexpr uint32_t m_iGoldBountyMax = 0x1538; // int32
		constexpr uint32_t m_hGoalEntity = 0x153c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hNeutralSpawner = 0x1540; // CHandle< C_DOTA_NeutralSpawner >
		constexpr uint32_t m_hClientOverrideMaterial = 0x1548; // CStrongHandle< InfoForResourceTypeIMaterial2 >
		constexpr uint32_t m_nBaseModelMeshCount = 0x1554; // int32
		constexpr uint32_t m_nArcanaLevel = 0x1570; // int8
		constexpr uint32_t m_nDefaultArcanaLevel = 0x1571; // int8
		constexpr uint32_t m_defaultColorGemColor = 0x1572; // Color
		constexpr uint32_t m_bHasBuiltWearableSpawnList = 0x1590; // bool
		constexpr uint32_t m_NetworkSequenceIndex = 0x16b8; // int32
		constexpr uint32_t m_gibTintColor = 0x1831; // Color
		constexpr uint32_t m_bShouldDoFlyHeightVisual = 0x16bc; // bool
		constexpr uint32_t m_flStartSequenceCycle = 0x16c0; // float32
		constexpr uint32_t m_hBackgroundSceneEnt = 0x16e0; // CHandle< C_SceneEntity >
		constexpr uint32_t m_hSpeakingSceneEnt = 0x16e4; // CHandle< C_SceneEntity >
		constexpr uint32_t m_hOldWearables = 0x16f8; // CUtlVector< CHandle< C_EconWearable > >
		constexpr uint32_t m_hOldWearableSkins = 0x1710; // CUtlVector< CUtlStringToken >
		constexpr uint32_t m_CustomHealthLabel = 0x1728; // char[256]
		constexpr uint32_t m_CustomHealthLabelColor = 0x1828; // Color
		constexpr uint32_t m_bForceMaterialCombine = 0x1835; // bool
		constexpr uint32_t m_bShouldDrawParticlesWhileHidden = 0x1836; // bool
		constexpr uint32_t m_bIsClientThinkPending = 0x1837; // bool
		constexpr uint32_t m_bActivityModifiersDirty = 0x1838; // bool
		constexpr uint32_t m_bUnitModelVariantChanged = 0x1839; // bool
		constexpr uint32_t m_bWearablesAreTaunting = 0x183a; // bool
		constexpr uint32_t m_bShowCannotBeDisabledIcon = 0x1850; // bool
	}
	namespace CBasePlayerController {
		constexpr uint32_t m_hSplitOwner = 0x608; // CHandle< CBasePlayerController >
		constexpr uint32_t m_nFinalPredictedTick = 0x570; // int32
		constexpr uint32_t m_CommandContext = 0x578; // C_CommandContext
		constexpr uint32_t m_hPawn = 0x5fc; // CHandle< C_BasePlayerPawn >
		constexpr uint32_t m_nTickBase = 0x5f8; // uint32
		constexpr uint32_t m_hPredictedPawn = 0x600; // CHandle< C_BasePlayerPawn >
		constexpr uint32_t m_nSplitScreenSlot = 0x604; // CSplitScreenSlot
		constexpr uint32_t m_nInButtonsWhichAreToggles = 0x5f0; // uint64
		constexpr uint32_t m_hSplitScreenPlayers = 0x610; // CUtlVector< CHandle< CBasePlayerController > >
		constexpr uint32_t m_bIsHLTV = 0x628; // bool
		constexpr uint32_t m_iConnected = 0x62c; // PlayerConnectedState
		constexpr uint32_t m_iszPlayerName = 0x630; // char[128]
		constexpr uint32_t m_steamID = 0x6b8; // uint64
		constexpr uint32_t m_bIsLocalPlayerController = 0x6c0; // bool
		constexpr uint32_t m_iDesiredFOV = 0x6c4; // uint32
	}
	namespace CEntityInstance {
		constexpr uint32_t m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
		constexpr uint32_t m_pEntity = 0x10; // CEntityIdentity*
		constexpr uint32_t m_worldGroupId = 0x20; // CUtlStringToken
		constexpr uint32_t m_CScriptComponent = 0x30; // CScriptComponent*
	}
	namespace C_DOTA_BaseNPC_Hero {
		constexpr uint32_t m_nKillStreakFXTier = 0x1bac; // int32
		constexpr uint32_t m_flIntellect = 0x1878; // float32
		constexpr uint32_t m_nLastDrawnHealth = 0x18e0; // int32
		constexpr uint32_t m_flRespawnTimePenalty = 0x186c; // float32
		constexpr uint32_t m_nFXDeathIndex = 0x18a4; // ParticleIndex_t
		constexpr uint32_t m_iCurrentXP = 0x1860; // int32
		constexpr uint32_t m_iAbilityPoints = 0x1864; // int32
		constexpr uint32_t m_flStrengthTotal = 0x187c; // float32
		constexpr uint32_t m_bRecombineForMaterialsOnly = 0x0; // bitfield:1
		constexpr uint32_t m_flRespawnTime = 0x1868; // float32
		constexpr uint32_t m_flAgility = 0x1874; // float32
		constexpr uint32_t m_flStrength = 0x1870; // float32
		constexpr uint32_t m_bUpdateClientsideWearables = 0x0; // bitfield:1
		constexpr uint32_t m_iPlayerID = 0x18c8; // PlayerID_t
		constexpr uint32_t m_flAgilityTotal = 0x1880; // float32
		constexpr uint32_t m_iHeroID = 0x1b40; // int32
		constexpr uint32_t m_flIntellectTotal = 0x1884; // float32
		constexpr uint32_t m_flHurtAmount = 0x18e4; // float32
		constexpr uint32_t m_nFXSilenceIndex = 0x18a0; // ParticleIndex_t
		constexpr uint32_t m_flDeathTime = 0x1888; // float32
		constexpr uint32_t m_hReplicatingOtherHeroModel = 0x18cc; // CHandle< C_DOTA_BaseNPC_Hero >
		constexpr uint32_t m_iRecentDamage = 0x188c; // int32
		constexpr uint32_t m_fPainFactor = 0x1890; // float32
		constexpr uint32_t m_bCustomKillEffect = 0x18d1; // bool
		constexpr uint32_t m_fTargetPainFactor = 0x1894; // float32
		constexpr uint32_t m_bForceBuildCombinedModel = 0x0; // bitfield:1
		constexpr uint32_t m_bLifeState = 0x1898; // bool
		constexpr uint32_t m_nFXStunIndex = 0x189c; // ParticleIndex_t
		constexpr uint32_t m_bReincarnating = 0x18d0; // bool
		constexpr uint32_t m_flHurtDecayRate = 0x18ec; // float32
		constexpr uint32_t m_flSpawnedAt = 0x18d4; // float32
		constexpr uint32_t m_flCheckLegacyItemsAt = 0x1b44; // float32
		constexpr uint32_t m_bScriptDisableRespawns = 0x18d8; // bool
		constexpr uint32_t m_bStoredVisibility = 0x0; // bitfield:1
		constexpr uint32_t m_iPrimaryAttribute = 0x18dc; // int32
		constexpr uint32_t m_flLastHurtTime = 0x18e8; // float32
		constexpr uint32_t m_flLastHealTime = 0x18f0; // float32
		constexpr uint32_t m_flLastTreeShakeTime = 0x18f4; // float32
		constexpr uint32_t m_CenterOnHeroCooldownTimer = 0x18f8; // CountdownTimer
		constexpr uint32_t m_bResetVisibility = 0x0; // bitfield:1
		constexpr uint32_t m_CombinedModels = 0x1b18; // CStrongHandle< InfoForResourceTypeCModel >[4]
		constexpr uint32_t m_nCurrentCombinedModelIndex = 0x1b38; // int32
		constexpr uint32_t m_nPendingCombinedModelIndex = 0x1b3c; // int32
		constexpr uint32_t m_bDisplayAdditionalHeroes = 0x1b48; // bool
		constexpr uint32_t m_CombinedParticleModels = 0x1b58; // CStrongHandle< InfoForResourceTypeCModel >[4]
		constexpr uint32_t m_bWasFrozen = 0x0; // bitfield:1
		constexpr uint32_t m_vecAttachedParticleIndeces = 0x1b78; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_hPets = 0x1b90; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_nKillStreakFX = 0x1ba8; // ParticleIndex_t
		constexpr uint32_t m_bBuybackDisabled = 0x0; // bitfield:1
		constexpr uint32_t m_bBuildingCombinedModel = 0x0; // bitfield:1
		constexpr uint32_t m_bInReloadEvent = 0x0; // bitfield:1
		constexpr uint32_t m_bStoreOldVisibility = 0x0; // bitfield:1
	}
	namespace C_BaseFlex {
		constexpr uint32_t m_iMouthAttachment = 0xa4d; // AttachmentHandle_t
		constexpr uint32_t m_iBlink = 0xa44; // int32
		constexpr uint32_t m_flexWeight = 0x998; // C_NetworkUtlVectorBase< float32 >
		constexpr uint32_t m_vEyeOcclusionRendererHalfExtent = 0xab4; // Vector
		constexpr uint32_t m_nNextSceneEventId = 0xa40; // uint32
		constexpr uint32_t m_blinktoggle = 0x9b0; // bool
		constexpr uint32_t m_blinktime = 0xa48; // float32
		constexpr uint32_t m_vLookTargetPosition = 0x9b8; // Vector
		constexpr uint32_t m_flMinEyeLeftRight = 0xa78; // float32
		constexpr uint32_t m_CachedViewTarget = 0xa2c; // Vector
		constexpr uint32_t m_nLastFlexUpdateFrameCount = 0xa28; // int32
		constexpr uint32_t m_prevblinktoggle = 0xa4c; // bool
		constexpr uint32_t m_iEyeAttachment = 0xa4e; // AttachmentHandle_t
		constexpr uint32_t m_bResetFlexWeightsOnModelChange = 0xa4f; // bool
		constexpr uint32_t m_iEyeLidUpDownPP = 0xa68; // int32
		constexpr uint32_t m_iEyeLidLeftRightPP = 0xa6c; // int32
		constexpr uint32_t m_flMinEyeUpDown = 0xa70; // float32
		constexpr uint32_t m_flMaxEyeUpDown = 0xa74; // float32
		constexpr uint32_t m_flMaxEyeLeftRight = 0xa7c; // float32
		constexpr uint32_t m_nEyeOcclusionRendererBone = 0xa80; // int32
		constexpr uint32_t m_mEyeOcclusionRendererCameraToBoneTransform = 0xa84; // matrix3x4_t
		constexpr uint32_t m_PhonemeClasses = 0xad0; // C_BaseFlex::Emphasized_Phoneme[3]
	}
	namespace C_BaseAnimating {
		constexpr uint32_t m_CHitboxComponent = 0x7d8; // CHitboxComponent
		constexpr uint32_t m_pRagdollPose = 0x810; // PhysicsRagdollPose_t*
		constexpr uint32_t m_vecForce = 0x818; // Vector
		constexpr uint32_t m_bHasAnimatedMaterialAttributes = 0x848; // bool
		constexpr uint32_t m_bAnimGraphUpdateEnabled = 0x829; // bool
		constexpr uint32_t m_nForceBone = 0x824; // int32
		constexpr uint32_t m_vLastSlopeCheckPos = 0x830; // Vector
		constexpr uint32_t m_bShouldAnimateDuringGameplayPause = 0x828; // bool
		constexpr uint32_t m_flMaxSlopeDistance = 0x82c; // float32
		constexpr uint32_t m_pSuppressedAnimEventTags = 0x840; // CUtlVector< CUtlString >*
		constexpr uint32_t m_bIsStaticProp = 0x85a; // bool
		constexpr uint32_t m_pClientsideRagdoll = 0x850; // C_BaseAnimating*
		constexpr uint32_t m_bInitModelEffects = 0x858; // bool
		constexpr uint32_t m_builtRagdoll = 0x859; // bool
		constexpr uint32_t m_bSuppressAnimEventSounds = 0x890; // bool
	}
	namespace C_DOTA_UnitInventory {
		constexpr uint32_t m_hInventoryParent = 0x84; // CHandle< C_BaseEntity >
		constexpr uint32_t m_iParity = 0x80; // int32
		constexpr uint32_t m_SharedCooldownList = 0x8; // CUtlVector< sSharedCooldownInfo >
		constexpr uint32_t m_hItems = 0x20; // CHandle< C_BaseEntity >[19]
		constexpr uint32_t m_hTransientCastItem = 0x8c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bItemQueried = 0x6c; // bool[19]
		constexpr uint32_t m_bStashEnabled = 0x89; // bool
		constexpr uint32_t m_bIsActive = 0x88; // bool
		constexpr uint32_t m_bSendChangedMsg = 0xa8; // bool
	}
	namespace C_BaseModelEntity {
		constexpr uint32_t m_bVisibilityDirtyFlag = 0x585; // bool
		constexpr uint32_t m_pClientAlphaProperty = 0x7c8; // CClientAlphaProperty*
		constexpr uint32_t m_flFadeScale = 0x714; // float32
		constexpr uint32_t m_CRenderComponent = 0x568; // CRenderComponent*
		constexpr uint32_t m_fadeMaxDist = 0x710; // float32
		constexpr uint32_t m_iOldHealth = 0x580; // int32
		constexpr uint32_t m_flDecalHealHeightRate = 0x740; // float32
		constexpr uint32_t m_iViewerID = 0x570; // int32
		constexpr uint32_t m_iTeamVisibilityBitmask = 0x574; // int32
		constexpr uint32_t m_nLastAddDecal = 0x578; // int32
		constexpr uint32_t m_nRenderFX = 0x586; // RenderFx_t
		constexpr uint32_t m_nDecalsAdded = 0x57c; // int32
		constexpr uint32_t m_nRenderMode = 0x584; // RenderMode_t
		constexpr uint32_t m_bAllowFadeInView = 0x587; // bool
		constexpr uint32_t m_flDecalHealBloodRate = 0x73c; // float32
		constexpr uint32_t m_clrRender = 0x588; // Color
		constexpr uint32_t m_RenderAttributeIDs = 0x58c; // CUtlStringToken[4]
		constexpr uint32_t m_RenderAttributeValues = 0x59c; // Vector4D[4]
		constexpr uint32_t m_bUseClientOverrideTint = 0x7d4; // bool
		constexpr uint32_t m_LightGroup = 0x5f8; // CUtlStringToken
		constexpr uint32_t m_bRenderToCubemaps = 0x5fc; // bool
		constexpr uint32_t m_ClientOverrideTint = 0x7d0; // Color
		constexpr uint32_t m_Collision = 0x600; // CCollisionProperty
		constexpr uint32_t m_Glow = 0x6b0; // CGlowProperty
		constexpr uint32_t m_flGlowBackfaceMult = 0x708; // float32
		constexpr uint32_t m_fadeMinDist = 0x70c; // float32
		constexpr uint32_t m_flShadowStrength = 0x718; // float32
		constexpr uint32_t m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x748; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
		constexpr uint32_t m_vDecalForwardAxis = 0x730; // Vector
		constexpr uint32_t m_nObjectCulling = 0x71c; // uint8
		constexpr uint32_t m_nAddDecal = 0x720; // int32
		constexpr uint32_t m_vDecalPosition = 0x724; // Vector
		constexpr uint32_t m_vecViewOffset = 0x760; // CNetworkViewOffsetVector
	}
	namespace C_DOTAPlayerController {
		constexpr uint32_t m_bOverridingQuery = 0x930; // bool
		constexpr uint32_t m_iMinimapMove = 0x768; // int32
		constexpr uint32_t m_flConsumeDoubleclickTime = 0x93c; // float32
		constexpr uint32_t m_pClickBehaviorKeys = 0x770; // KeyValues*
		constexpr uint32_t m_flCenterTime = 0x778; // float32
		constexpr uint32_t m_iConfirmationIndex = 0x77c; // int32
		constexpr uint32_t m_hPreviousKillCamUnit = 0x7e0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hQueryUnit = 0x88c; // CHandle< C_DOTA_BaseNPC >
		constexpr uint32_t m_hFreeDrawAbility = 0x7c0; // CHandle< C_DOTABaseAbility >
		constexpr uint32_t m_ActiveRingOwners = 0x918; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_bTeleportRequiresHalt = 0x804; // bool
		constexpr uint32_t m_nPlayerID = 0x7d0; // PlayerID_t
		constexpr uint32_t m_bHeroAssigned = 0x781; // bool
		constexpr uint32_t m_bCenterOnHero = 0x780; // bool
		constexpr uint32_t m_bSelectionChangedInDataUpdate = 0x891; // bool
		constexpr uint32_t m_nKeyBindHeroID = 0x784; // int32
		constexpr uint32_t m_nXPRangeFXIndex = 0x824; // ParticleIndex_t
		constexpr uint32_t m_bUsingCameraMan = 0x788; // bool
		constexpr uint32_t m_nServerOrderSequenceNumber = 0x854; // int32
		constexpr uint32_t m_unitorders = 0x838; // CUtlVector< CUnitOrders >
		constexpr uint32_t m_bUsingAssistedCameraOperator = 0x789; // bool
		constexpr uint32_t m_flKillCamUnitReceivedTime = 0x7e4; // float32
		constexpr uint32_t m_bInQuery = 0x890; // bool
		constexpr uint32_t m_nRareLineGroup = 0x7f8; // int32
		constexpr uint32_t m_nPlayerAssistFlags = 0x78c; // int32
		constexpr uint32_t m_vLastFreeDrawPosition = 0x7c4; // Vector
		constexpr uint32_t m_vLatestEvent = 0x790; // Vector
		constexpr uint32_t m_nRareLinesPlayed = 0x7f4; // int32
		constexpr uint32_t m_iPrevCursor = 0xb08; // int32[2]
		constexpr uint32_t m_hAssignedHero = 0x7d4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hLastAssignedHero = 0x7d8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hKillCamUnit = 0x7dc; // CHandle< C_BaseEntity >
		constexpr uint32_t m_nRareLineClickCount = 0x7f0; // int32
		constexpr uint32_t m_flLastRareLinePlayTime = 0x7fc; // float32
		constexpr uint32_t m_nVisionRangeFXIndex = 0x828; // ParticleIndex_t
		constexpr uint32_t m_flNextUnitOrdersTime = 0x800; // float32
		constexpr uint32_t m_bChannelRequiresHalt = 0x805; // bool
		constexpr uint32_t m_bAutoPurchaseItems = 0x806; // bool
		constexpr uint32_t m_flLastAutoRepeatTime = 0x938; // float32
		constexpr uint32_t m_bDisableHUDErrorMessages = 0x807; // bool
		constexpr uint32_t m_RingedEntities = 0x900; // CUtlVector< CHandle< C_BaseEntity > >
		constexpr uint32_t m_iMouseDragStartX = 0x808; // int32
		constexpr uint32_t m_iMouseDragStartY = 0x80c; // int32
		constexpr uint32_t m_nWeatherType = 0x810; // int32
		constexpr uint32_t m_bDynamicWeatherSystemActive = 0x814; // bool
		constexpr uint32_t m_bDynamicSoundHandled = 0x815; // bool
		constexpr uint32_t m_nOutgoingOrderSequenceNumber = 0x850; // int32
		constexpr uint32_t m_flDynamicWeatherNextSwitchTime = 0x818; // float32
		constexpr uint32_t m_flDynamicWeatherScaleFinishedTime = 0x81c; // float32
		constexpr uint32_t m_flDynamicWeatherIntensity = 0x820; // float32
		constexpr uint32_t m_LightInfoWeatherEffect = 0x940; // CUtlString
		constexpr uint32_t m_nSelectedControlGroup = 0x82c; // int32
		constexpr uint32_t m_nCachedCoachedTeam = 0x830; // int32
		constexpr uint32_t m_hActiveAbility = 0x834; // CHandle< C_DOTABaseAbility >
		constexpr uint32_t m_nSelectedUnits = 0x858; // CUtlVector< CEntityIndex >
		constexpr uint32_t m_MapDefaultWeatherEffect = 0x950; // CUtlString
		constexpr uint32_t m_nWaypoints = 0x870; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_iActions = 0x888; // int32
		constexpr uint32_t m_flQueryInhibitingActionTime = 0x8f8; // float32
		constexpr uint32_t m_flQueryInhibitDuration = 0x8fc; // float32
		constexpr uint32_t m_vecSuggestedWardLocationEffects = 0x998; // CUtlVector< ParticleIndex_t >
		constexpr uint32_t m_bPreviousWasLightInfoWeather = 0x948; // bool
		constexpr uint32_t m_bMapUsesDynamicWeather = 0x958; // bool
		constexpr uint32_t m_pSmartCastNPC = 0x9b0; // C_DOTA_BaseNPC*
		constexpr uint32_t m_szShopString = 0xa18; // char[64]
		constexpr uint32_t m_nTeamSprayParticleIndex = 0x9b8; // ParticleIndex_t
		constexpr uint32_t m_bIsNextCastOrderFromMouseClick = 0x9bc; // bool
		constexpr uint32_t m_iStatsDropdownCategory = 0xa10; // int32
		constexpr uint32_t m_iCursor = 0x9f0; // int32[2]
		constexpr uint32_t m_iSpectatorClickBehavior = 0x9f8; // int32
		constexpr uint32_t m_flAspectRatio = 0x9fc; // float32
		constexpr uint32_t m_hSpectatorQueryUnit = 0xa00; // CHandle< C_BaseEntity >
		constexpr uint32_t m_iStatsPanel = 0xa04; // int32
		constexpr uint32_t m_iShopPanel = 0xa08; // int32
		constexpr uint32_t m_iShopViewMode = 0xa0c; // ShopItemViewMode_t
		constexpr uint32_t m_iStatsDropdownSort = 0xa14; // int32
		constexpr uint32_t m_vecClientQuickBuyState = 0xa58; // C_UtlVectorEmbeddedNetworkVar< ClientQuickBuyItemState >
		constexpr uint32_t m_bInShowCaseMode = 0xaa8; // bool
		constexpr uint32_t m_flCameraZoomAmount = 0xaac; // float32
		constexpr uint32_t m_flAltHeldStartTime = 0xd30; // float32
		constexpr uint32_t m_iHighPriorityScore = 0xab0; // int32
		constexpr uint32_t m_quickBuyItems = 0xab4; // int32[9]
		constexpr uint32_t m_quickBuyIsPurchasable = 0xad8; // bool[9]
		constexpr uint32_t m_flFrameTime = 0xae4; // float32
		constexpr uint32_t m_flFrameTimeStdDev = 0xae8; // float32
		constexpr uint32_t m_flUnfilteredFrameTime = 0xaec; // float32
		constexpr uint32_t m_NeutralCampAlarms = 0xaf0; // CUtlVector< NeutralCampStackPullAlarm_t >
		constexpr uint32_t m_iPositionHistoryTail = 0xbb0; // int32
		constexpr uint32_t m_iMusicStatus = 0xbb4; // int32
		constexpr uint32_t m_iPreviousMusicStatus = 0xbb8; // int32
		constexpr uint32_t m_bRequestedInventory = 0xbbc; // bool
		constexpr uint32_t m_flMusicOperatorVals = 0xbc0; // float32[3]
		constexpr uint32_t m_iMusicOperatorVals = 0xbcc; // int32[4]
		constexpr uint32_t m_ControlGroups = 0xbe0; // CUtlVector< sControlGroupElem >[10]
		constexpr uint32_t m_pkvControlGroupKV = 0xcd0; // KeyValues*
	}
	namespace CDOTA_Buff {
		constexpr uint32_t m_iCreationFrame = 0x68; // int32
		constexpr uint32_t m_iAuraSearchFlags = 0x90; // int32
		constexpr uint32_t m_flDieTime = 0x74; // float32
		constexpr uint32_t m_name = 0x28; // CUtlSymbolLarge
		constexpr uint32_t m_flCreationTime = 0x64; // float32
		constexpr uint32_t m_iParticles = 0xb0; // CUtlVector< CDOTA_BuffParticle >
		constexpr uint32_t m_class = 0x40; // CUtlSymbolLarge
		constexpr uint32_t m_szModifierAura = 0x48; // CUtlSymbolLarge
		constexpr uint32_t m_iSerialNumber = 0x58; // int32
		constexpr uint32_t m_hAbility = 0x7c; // CHandle< CBaseEntity >
		constexpr uint32_t m_flDuration = 0x70; // float32
		constexpr uint32_t m_iStringIndex = 0x5c; // int32
		constexpr uint32_t m_iIndex = 0x60; // int32
		constexpr uint32_t m_flLastAppliedTime = 0x6c; // float32
		constexpr uint32_t m_hCaster = 0x78; // CHandle< CBaseEntity >
		constexpr uint32_t m_hParent = 0x80; // CHandle< CBaseEntity >
		constexpr uint32_t m_hAuraOwner = 0x84; // CHandle< CBaseEntity >
		constexpr uint32_t m_iStackCount = 0x88; // int32
		constexpr uint32_t m_iAuraSearchTeam = 0x8c; // int16
		constexpr uint32_t m_flPreviousTick = 0xa4; // float32
		constexpr uint32_t m_iAuraSearchType = 0x8e; // int16
		constexpr uint32_t m_iAuraRadius = 0x94; // int32
		constexpr uint32_t m_iTeam = 0x98; // int32
		constexpr uint32_t m_iAttributes = 0x9c; // int32
		constexpr uint32_t m_iPaddingToMakeSchemaHappy2 = 0xa0; // int16
		constexpr uint32_t m_bIsAura = 0x0; // bitfield:1
		constexpr uint32_t m_bIsAuraActiveOnDeath = 0x0; // bitfield:1
		constexpr uint32_t m_bMarkedForDeletion = 0x0; // bitfield:1
		constexpr uint32_t m_hScriptScope = 0x1110; // HSCRIPT
		constexpr uint32_t m_bAuraIsHeal = 0x0; // bitfield:1
		constexpr uint32_t m_bProvidedByAura = 0x0; // bitfield:1
		constexpr uint32_t m_bPurgedDestroy = 0xa3; // bool
		constexpr uint32_t m_flThinkInterval = 0xa8; // float32
		constexpr uint32_t m_flThinkTimeAccumulator = 0xac; // float32
		constexpr uint32_t m_hAuraUnits = 0xc8; // CUtlVector< CHandle< CBaseEntity > >
	}
	namespace C_DOTA_PlayerResource {
		constexpr uint32_t m_nPrimaryEventIndex = 0x688; // int8
		constexpr uint32_t m_iszFilteredHTMLSafeName = 0xb90; // CUtlSymbolLarge[64]
		constexpr uint32_t m_bWasDataUpdateCreated = 0x578; // bool
		constexpr uint32_t m_bSwapWillingness = 0x2595; // bool[24]
		constexpr uint32_t m_playerIDToPlayer = 0x690; // CHandle< C_BaseEntity >[64]
		constexpr uint32_t m_vecPlayerTeamData = 0x580; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerTeamData_t >
		constexpr uint32_t m_vecPlayerData = 0x5d0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerData_t >
		constexpr uint32_t m_nEventNPCReplaced = 0x2df0; // int32
		constexpr uint32_t m_vecBrodcasterData = 0x620; // C_UtlVectorEmbeddedNetworkVar< PlayerResourceBroadcasterData_t >
		constexpr uint32_t m_vecEventsForDisplay = 0x670; // C_NetworkUtlVectorBase< uint32 >
		constexpr uint32_t m_vecOnstagePlayerSeats = 0x2dd8; // CUtlVector< PlayerSeatAssignment_t >
		constexpr uint32_t m_nObsoleteEventIDAssociatedWithEventData = 0x68c; // uint32
		constexpr uint32_t m_iszName = 0x790; // CUtlSymbolLarge[64]
		constexpr uint32_t m_iszHTMLSafeName = 0x990; // CUtlSymbolLarge[64]
		constexpr uint32_t m_bHasWorldTreesChanged = 0x2593; // bool
		constexpr uint32_t m_bDirtySuggestedItems = 0x2590; // bool
		constexpr uint32_t m_bDirtyEstimatedMatchDuration = 0x2591; // bool
		constexpr uint32_t m_bDirtySelection = 0x2592; // bool
		constexpr uint32_t m_bWorldTreeModelsChanged = 0x2594; // bool
		constexpr uint32_t m_hTeamCouriers = 0x25b0; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[14]
		constexpr uint32_t m_hPlayerCouriers = 0x2700; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[64]
		constexpr uint32_t m_vecOnstageHomeTeams = 0x2d00; // CUtlVector< uint32 >
		constexpr uint32_t m_pPlayerIDToOnstageSlot = 0x2d18; // PlayerSeatAssignment_t*[24]
		constexpr uint32_t m_nInventoryUpdated = 0x2df8; // int32
		constexpr uint32_t m_nEventPlayerInfo = 0x2df4; // int32
	}
	namespace C_DOTAGamerules {
		constexpr uint32_t m_iCMModePickBanOrder = 0x21c; // int32
		constexpr uint32_t m_iGameMode = 0xcc; // int32
		constexpr uint32_t m_CustomGameTeamMaxPlayers = 0xdf0; // int32[14]
		constexpr uint32_t m_vecNewBannedHeroes = 0x378; // C_NetworkUtlVectorBase< int32 >
		constexpr uint32_t m_flOverride_dota_postgame_time = 0x80; // float32
		constexpr uint32_t m_bFreeCourierMode = 0x42; // bool
		constexpr uint32_t m_flLastUnfocusedSleepTime = 0xabc8; // float64
		constexpr uint32_t __m_pChainEntity = 0x8; // CNetworkVarChainer
		constexpr uint32_t m_iPlayerIDsInControl = 0xe0; // uint64
		constexpr uint32_t m_iMiscHeroPickCounter = 0x30; // int32
		constexpr uint32_t m_nGoldPerTick = 0x48; // int32
		constexpr uint32_t m_bIsInClientSideCinematicMode = 0x41; // bool
		constexpr uint32_t m_bIsInCinematicMode = 0x40; // bool
		constexpr uint32_t m_bCreepSpawningEnabled = 0xf8; // bool
		constexpr uint32_t m_hEndGameCinematicEntity = 0x34; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bPlaytestHandicapsInitialized = 0xa1c; // bool
		constexpr uint32_t m_bUseUniversalShopMode = 0xeb; // bool
		constexpr uint32_t m_bHUDTimerTutorialMode = 0x25c; // bool
		constexpr uint32_t m_flOverride_dota_hero_selection_time = 0x78; // float32
		constexpr uint32_t m_nOverlayHealthBarType = 0x3c; // int32
		constexpr uint32_t m_flOverride_dota_pregame_time = 0x7c; // float32
		constexpr uint32_t m_hOverlayHealthBarUnit = 0x38; // CHandle< C_DOTA_BaseNPC >
		constexpr uint32_t m_nStartingGold = 0x44; // int32
		constexpr uint32_t m_flHeroSelectPenaltyTime = 0x210; // float32
		constexpr uint32_t m_flGoldTickTime = 0x4c; // float32
		constexpr uint32_t m_nHeroPickState = 0x6c; // DOTA_HeroPickState
		constexpr uint32_t m_bDidSeeStrategyTime = 0x1e70; // bool
		constexpr uint32_t m_bItemWhiteListChanged = 0x50; // bool
		constexpr uint32_t m_flCustomGameEndDelay = 0x200; // float32
		constexpr uint32_t m_bEnableSuggestAbilities = 0x51; // bool
		constexpr uint32_t m_bHeroRespawnEnabled = 0x298; // bool
		constexpr uint32_t m_bSameHeroSelectionEnabled = 0xe8; // bool
		constexpr uint32_t m_bEnableSuggestItems = 0x52; // bool
		constexpr uint32_t m_unFanfareGoodGuys = 0x54; // uint32
		constexpr uint32_t m_flCustomGameSetupAutoLaunchDelay = 0x204; // float32
		constexpr uint32_t m_unFanfareBadGuys = 0x58; // uint32
		constexpr uint32_t m_bHideKillMessageHeaders = 0xec; // bool
		constexpr uint32_t m_fGameTime = 0x89c; // float32
		constexpr uint32_t m_iMapType = 0x5c; // int32
		constexpr uint32_t m_flRoshanRespawnPhaseEndTime = 0xb44; // float32
		constexpr uint32_t m_nServerGameState = 0x60; // int32
		constexpr uint32_t m_bUseCustomHeroXPValue = 0xe9; // bool
		constexpr uint32_t m_nServerHeroPickState = 0x64; // DOTA_HeroPickState
		constexpr uint32_t m_nGameState = 0x68; // int32
		constexpr uint32_t m_bAlternateHeroGridsEnabled = 0x70; // bool
		constexpr uint32_t m_flStateTransitionTime = 0x74; // float32
		constexpr uint32_t m_iCDModePickBanOrder = 0x220; // int32
		constexpr uint32_t m_flCustomGameSetupTimeout = 0x208; // float32
		constexpr uint32_t m_flXPTime = 0x524; // float32
		constexpr uint32_t m_flOverride_dota_strategy_time = 0x84; // float32
		constexpr uint32_t m_flRuneMinimapIconScale = 0xfc; // float32
		constexpr uint32_t m_hCustomHeroPickRulesEntity = 0xd4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_bLobbyIsAssociatedWithGame = 0xae5; // bool
		constexpr uint32_t m_flOverride_dota_team_showcase_duration = 0x88; // float32
		constexpr uint32_t m_bCustomGameAllowMusicAtGameStart = 0x218; // bool
		constexpr uint32_t m_bCustomGameAllowSecondaryAbilitiesOnOtherUnits = 0x21b; // bool
		constexpr uint32_t m_fTimeOfDay = 0x8a0; // float32
		constexpr uint32_t m_flOverride_dota_rune_spawn_time = 0x8c; // float32
		constexpr uint32_t m_flShowcaseTime = 0x90; // float32[14]
		constexpr uint32_t m_bCustomGameAllowHeroPickMusic = 0x217; // bool
		constexpr uint32_t m_nGGTeam = 0x228; // int32
		constexpr uint32_t m_arrTier2TowerDestroyed = 0x87a; // bool[14]
		constexpr uint32_t m_flNeutralInitialSpawnOffset = 0xc8; // float32
		constexpr uint32_t m_nDireSeriesWins = 0x3cc; // int32
		constexpr uint32_t m_flCustomVictoryMessageDuration = 0x20c; // float32
		constexpr uint32_t m_bCustomGameEnablePickRules = 0x216; // bool
		constexpr uint32_t m_hAnnouncerBad = 0x858; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hGameModeEntity = 0xd0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_flHeroPickStateTransitionTime = 0xd8; // float32
		constexpr uint32_t m_bIsLoadingScenario = 0x374; // bool
		constexpr uint32_t m_bUseBaseGoldBountyOnHeroes = 0xea; // bool
		constexpr uint32_t m_flHeroMinimapIconScale = 0xf0; // float32
		constexpr uint32_t m_fLastARDMPrecache = 0xc14; // float32
		constexpr uint32_t m_flCreepMinimapIconScale = 0xf4; // float32
		constexpr uint32_t m_lobbyLeagueID = 0xc9c; // LeagueID_t
		constexpr uint32_t m_CustomVictoryMessage = 0x100; // char[256]
		constexpr uint32_t m_bCustomGameSetupAutoLaunchEnabled = 0x214; // bool
		constexpr uint32_t m_bCustomGameTeamSelectionLocked = 0x215; // bool
		constexpr uint32_t m_flTimeEnteredState = 0x6d0; // float64
		constexpr uint32_t m_bCustomGameAllowBattleMusic = 0x219; // bool
		constexpr uint32_t m_vecAvailableHerosPerPlayerID = 0x3d0; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_bCustomGameDisableIK = 0x21a; // bool
		constexpr uint32_t m_fUnpauseRawTime = 0x940; // float32
		constexpr uint32_t m_iPauseTeam = 0x224; // int32
		constexpr uint32_t m_flGGEndsAtTime = 0x22c; // float32
		constexpr uint32_t m_bGGCalled = 0x230; // bool
		constexpr uint32_t m_bWhiteListEnabled = 0x231; // bool
		constexpr uint32_t m_bItemWhiteList = 0x238; // uint64[4]
		constexpr uint32_t m_nLastHitUIMode = 0x258; // int32
		constexpr uint32_t m_HeroPickMiscTimer = 0x260; // CountdownTimer
		constexpr uint32_t m_ExtraTimeTimer = 0x278; // CountdownTimer
		constexpr uint32_t m_fExtraTimeRemaining = 0x290; // float32[2]
		constexpr uint32_t m_hTeamFountains = 0x7ac; // CHandle< C_BaseEntity >[14]
		constexpr uint32_t m_bIsRandomingEnabled = 0x299; // bool
		constexpr uint32_t m_fBadRadarCooldown = 0x5a4; // float32
		constexpr uint32_t m_iCaptainPlayerIDs = 0x29c; // PlayerID_t[2]
		constexpr uint32_t m_BannedHeroes = 0x2a4; // int32[24]
		constexpr uint32_t m_SelectedHeroes = 0x304; // int32[24]
		constexpr uint32_t m_iActiveTeam = 0x364; // int32
		constexpr uint32_t m_iStartingTeam = 0x368; // int32
		constexpr uint32_t m_iPenaltyLevelRadiant = 0x36c; // int32
		constexpr uint32_t m_iPenaltyLevelDire = 0x370; // int32
		constexpr uint32_t m_vecWhitelistedHeroes = 0x390; // C_NetworkUtlVectorBase< int32 >
		constexpr uint32_t m_vecBlacklistedHeroes = 0x3a8; // C_NetworkUtlVectorBase< int32 >
		constexpr uint32_t m_bUpdateHeroStatues = 0xc28; // bool
		constexpr uint32_t m_bHideBlacklistedHeroes = 0x3c0; // bool
		constexpr uint32_t m_nSeriesType = 0x3c4; // int32
		constexpr uint32_t m_nRadiantSeriesWins = 0x3c8; // int32
		constexpr uint32_t m_vecLockedHerosByPlayerID = 0x420; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_vecDisabledRandomHerosByPlayerID = 0x470; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
		constexpr uint32_t m_CustomGameForceSelectHero = 0x4c0; // int32[24]
		constexpr uint32_t m_flGoldTime = 0x520; // float32
		constexpr uint32_t m_flCreepSpawntime = 0x528; // float32
		constexpr uint32_t m_iCustomGameScore = 0x548; // int32[2]
		constexpr uint32_t m_flAnnounceStartTime = 0x52c; // float32
		constexpr uint32_t m_iGoodTomeCount = 0x530; // int32
		constexpr uint32_t m_iBadTomeCount = 0x534; // int32
		constexpr uint32_t m_flPreGameStartTime = 0x538; // float32
		constexpr uint32_t m_flGameStartTime = 0x53c; // float32
		constexpr uint32_t m_flGameEndTime = 0x540; // float32
		constexpr uint32_t m_flGameLoadTime = 0x544; // float32
		constexpr uint32_t m_nCustomGameDifficulty = 0x550; // int32
		constexpr uint32_t m_fPauseCurTime = 0x93c; // float32
		constexpr uint32_t m_bEnemyModifiersEnabled = 0x554; // bool
		constexpr uint32_t m_iWaves = 0x558; // int32
		constexpr uint32_t m_iCreepUpgradeState = 0x55c; // int32
		constexpr uint32_t m_hSecretShop2 = 0x7a8; // CHandle< C_BaseEntity >
		constexpr uint32_t m_fGoodGlyphCooldown = 0x560; // float32
		constexpr uint32_t m_fBadGlyphCooldown = 0x564; // float32
		constexpr uint32_t m_flGlyphCooldowns = 0x568; // float32[14]
		constexpr uint32_t m_fGoodRadarCooldown = 0x5a0; // float32
		constexpr uint32_t m_flRadarCooldowns = 0x5a8; // float32[14]
		constexpr uint32_t m_flOutpostTimes = 0x5e0; // float32[24]
		constexpr uint32_t m_bAllRequiredPlaytestHeroesPicked = 0xa14; // bool
		constexpr uint32_t m_bIsNightstalkerNight = 0x640; // bool
		constexpr uint32_t m_bIsTemporaryNight = 0x641; // bool
		constexpr uint32_t m_bIsTemporaryDay = 0x642; // bool
		constexpr uint32_t m_nAbilityDraftRoundNumber = 0xba0; // int32
		constexpr uint32_t m_nRiverType = 0x644; // int32
		constexpr uint32_t m_nTeamFeaturedPlayerID = 0x648; // PlayerID_t[14]
		constexpr uint32_t m_nTeamVersusScreen = 0x680; // item_definition_index_t[14]
		constexpr uint32_t m_flGoldRedistributeTime = 0x6b8; // float32
		constexpr uint32_t m_nGoldToRedistribute = 0x6bc; // int32[2]
		constexpr uint32_t m_flNextPreGameThink = 0x6c4; // float32
		constexpr uint32_t m_unRiverAccountID = 0x6d8; // uint32
		constexpr uint32_t m_flNextAllDraftGoldThink = 0x6c8; // float32
		constexpr uint32_t m_ulRiverItemID = 0x6e0; // itemid_t
		constexpr uint32_t m_vecItemStockInfo = 0x728; // C_UtlVectorEmbeddedNetworkVar< CDOTA_ItemStockInfo >
		constexpr uint32_t m_AssassinMiniGameNetData = 0x778; // DOTA_AssassinMinigameNetworkState
		constexpr uint32_t m_nGameWinner = 0x788; // int32
		constexpr uint32_t m_unMatchID64 = 0x790; // MatchID_t
		constexpr uint32_t m_bMatchSignoutComplete = 0x798; // bool
		constexpr uint32_t m_hSideShop1 = 0x79c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSideShop2 = 0x7a0; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hSecretShop1 = 0x7a4; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hTeamForts = 0x7e4; // CHandle< C_BaseEntity >[14]
		constexpr uint32_t m_iNetTimeOfDay = 0x8a4; // int32
		constexpr uint32_t m_hTeamShops = 0x81c; // CHandle< C_BaseEntity >[14]
		constexpr uint32_t m_hAnnouncerGood = 0x854; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerSpectator = 0x85c; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerGood_KillingSpree = 0x860; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerBad_KillingSpree = 0x864; // CHandle< C_BaseEntity >
		constexpr uint32_t m_hAnnouncerSpectator_KillingSpree = 0x868; // CHandle< C_BaseEntity >
		constexpr uint32_t m_iMinimapDebugGridState = 0x8b8; // int32
		constexpr uint32_t m_arrTier1TowerDestroyed = 0x86c; // bool[14]
		constexpr uint32_t m_arrTier3TowerDestroyed = 0x888; // bool[14]
		constexpr uint32_t m_bTier1TowerDestroyed = 0x896; // bool
		constexpr uint32_t m_bTier2TowerDestroyed = 0x897; // bool
		constexpr uint32_t m_bTier3TowerDestroyed = 0x898; // bool
		constexpr uint32_t m_nLoadedPlayers = 0x8a8; // int32
		constexpr uint32_t m_nExpectedPlayers = 0x8ac; // int32
		constexpr uint32_t m_iFoWFrameNumber = 0x930; // int32
		constexpr uint32_t m_bIsStableMode = 0x934; // bool
		constexpr uint32_t m_bGamePaused = 0x935; // bool
		constexpr uint32_t m_fPauseRawTime = 0x938; // float32
		constexpr uint32_t m_fUnpauseCurTime = 0x944; // float32
		constexpr uint32_t m_vWeatherWindDirection = 0x948; // Vector
		constexpr uint32_t m_vecRequiredPlaytestHeroesStorage = 0x954; // int32[24]
		constexpr uint32_t m_bExperimentalGameplay = 0xc40; // bool
		constexpr uint32_t m_vecRecommendedPlaytestHeroesStorage = 0x9b4; // int32[24]
		constexpr uint32_t m_nLastPlaytestPickPhase = 0xa18; // int32
		constexpr uint32_t m_nPlaytestHandicapGoldPercent = 0xa20; // int32[24]
		constexpr uint32_t m_nPlaytestHandicapXPPercent = 0xa80; // int32[24]
		constexpr uint32_t m_nCustomGameFowTeamCount = 0xae0; // int32
		constexpr uint32_t m_bUseAlternateABRules = 0xae4; // bool
		constexpr uint32_t m_BotDebugTimer = 0xae8; // CountdownTimer
		constexpr uint32_t m_BotDebugPushLane = 0xb00; // uint8[18]
		constexpr uint32_t m_BotDebugDefendLane = 0xb12; // uint8[18]
		constexpr uint32_t m_BotDebugFarmLane = 0xb24; // uint8[6]
		constexpr uint32_t m_BotDebugRoam = 0xb2a; // uint8[8]
		constexpr uint32_t m_hBotDebugRoamTarget = 0xb34; // CHandle< C_BaseEntity >[2]
		constexpr uint32_t m_BotDebugRoshan = 0xb3c; // uint8[2]
		constexpr uint32_t m_nRoshanRespawnPhase = 0xb40; // ERoshanSpawnPhase
		constexpr uint32_t m_AbilityDraftAbilities = 0xb48; // C_UtlVectorEmbeddedNetworkVar< CDOTA_AbilityDraftAbilityState >
		constexpr uint32_t m_bAbilityDraftCurrentPlayerHasPicked = 0xb98; // bool
		constexpr uint32_t m_nAbilityDraftPlayerTracker = 0xb9c; // int32
		constexpr uint32_t m_vecARDMHeroes = 0xbe0; // CUtlVector< KeyValues* >[2]
		constexpr uint32_t m_nAbilityDraftAdvanceSteps = 0xba4; // int32
		constexpr uint32_t m_nAbilityDraftPhase = 0xba8; // int32
		constexpr uint32_t m_nAbilityDraftHeroesChosen = 0xbac; // int32[13]
		constexpr uint32_t m_nARDMHeroesPrecached = 0xc10; // int32
		constexpr uint32_t m_nAllDraftPhase = 0xc18; // int32
		constexpr uint32_t m_bAllDraftRadiantFirst = 0xc1c; // bool
		constexpr uint32_t m_bAllowOverrideVPK = 0xc1d; // bool
		constexpr uint32_t m_nARDMHeroesRemaining = 0xc20; // int32[2]
		constexpr uint32_t m_vecPlayerMMR = 0xc80; // CUtlVector< int32 >
		constexpr uint32_t m_lobbyType = 0xc98; // uint32
		constexpr uint32_t m_lobbyGameName = 0xca0; // char[256]
		constexpr uint32_t m_vecHeroStatueLiked = 0xda0; // C_UtlVectorEmbeddedNetworkVar< CHeroStatueLiked >
		constexpr uint32_t m_iMutations = 0xe28; // int32[5]
		constexpr uint32_t m_vecIngameEvents = 0xe40; // C_NetworkUtlVectorBase< CHandle< C_IngameEvent_Base > >
		constexpr uint32_t m_nPrimaryIngameEventIndex = 0xe58; // int8
		constexpr uint32_t m_hObsoleteIngameEvent = 0xe5c; // CHandle< C_IngameEvent_Base >
		constexpr uint32_t m_NeutralSpawnBoxes = 0xe90; // C_NetworkUtlVectorBase< NeutralSpawnBoxes_t >
		constexpr uint32_t m_flLastPerfSampleTime = 0x1e60; // float64
		constexpr uint32_t m_flLastPerfSampleSendTime = 0x1e68; // float64
	}
	namespace CGameSceneNode {
		constexpr uint32_t m_bNetworkedAnglesChanged = 0x0; // bitfield:1
		constexpr uint32_t m_nodeToWorld = 0x10; // CTransform
		constexpr uint32_t m_pOwner = 0x30; // CEntityInstance*
		constexpr uint32_t m_vecOrigin = 0x80; // CNetworkOriginCellCoordQuantizedVector
		constexpr uint32_t m_hParent = 0x70; // CGameSceneNodeHandle
		constexpr uint32_t m_pChild = 0x40; // CGameSceneNode*
		constexpr uint32_t m_pParent = 0x38; // CGameSceneNode*
		constexpr uint32_t m_pNextSibling = 0x48; // CGameSceneNode*
		constexpr uint32_t m_angRotation = 0xf0; // QAngle
		constexpr uint32_t m_flScale = 0xfc; // float32
		constexpr uint32_t m_nHierarchicalDepth = 0x123; // uint8
		constexpr uint32_t m_vecAbsOrigin = 0x100; // Vector
		constexpr uint32_t m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
		constexpr uint32_t m_angAbsRotation = 0x10c; // QAngle
		constexpr uint32_t m_flAbsScale = 0x118; // float32
		constexpr uint32_t m_nParentAttachmentOrBone = 0x11c; // int16
		constexpr uint32_t m_bDebugAbsOriginChanges = 0x11e; // bool
		constexpr uint32_t m_bDirtyHierarchy = 0x0; // bitfield:1
		constexpr uint32_t m_bDormant = 0x11f; // bool
		constexpr uint32_t m_bForceParentToBeNetworked = 0x120; // bool
		constexpr uint32_t m_bNetworkedPositionChanged = 0x0; // bitfield:1
		constexpr uint32_t m_bNetworkedScaleChanged = 0x0; // bitfield:1
		constexpr uint32_t m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
		constexpr uint32_t m_bNotifyBoneTransformsChanged = 0x0; // bitfield:1
		constexpr uint32_t m_bBoneMergeFlex = 0x0; // bitfield:1
		constexpr uint32_t m_nLatchAbsOrigin = 0x0; // bitfield:2
		constexpr uint32_t m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
		constexpr uint32_t m_nHierarchyType = 0x124; // uint8
		constexpr uint32_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0x125; // uint8
		constexpr uint32_t m_name = 0x128; // CUtlStringToken
		constexpr uint32_t m_hierarchyAttachName = 0x168; // CUtlStringToken
		constexpr uint32_t m_flZOffset = 0x16c; // float32
		constexpr uint32_t m_vRenderOrigin = 0x170; // Vector
	}
}